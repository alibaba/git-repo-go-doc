[{"content":"快速开始 步骤 1：安装 git-repo 访问 git-repo 的下载页面: https://github.com/aliyun/git-repo-go/releases。\n根据您平台的类型，下载合适的软件包。然后将下载并解压缩后的 git-repo 文件拷贝到可执行目录中（如 Linux 下的 /usr/local/bin 目录），即完成安装。\n步骤 2：运行 git-repo 初次运行任意 git-repo 子命令，会完成一些初始化工作。例如执行下面的命令查看版本号：\ngit repo version  步骤 3：单仓库下发起代码评审 如果工作区当前分支未关联远程分支，先执行操作和远程仓库的远程分支建立关联。例如：如下命令建立和 origin 远程仓库的 master 分支建立关联。\ngit branch -u origin/master  发起代码审核，执行如下命令：\ngit pr  步骤 4：多仓库工作流 git-repo 支持 Android 式的多仓库工作流。\n  创建工作区。\n $ mkdir workspace $ cd workspace    下载 manifest 清单仓库，初始化工作区。\n $ git repo init -u \u0026lt;manifest repository\u0026gt;    按照 Manifest 清单仓库中的文件，下载各个子仓库的代码，并检出到工作区。\n $ git repo sync    创建开发分支。\n $ git repo start --all \u0026lt;branch/name\u0026gt;    在工作区中开发，每个仓库的改动，在各自仓库中完成提交。\n  执行下面命令，扫描工作区所有仓库的改动，逐个向上游仓库发起代码评审。\n $ git repo upload    ","description":"","id":0,"section":"docs","tags":null,"title":"快速开始","uri":"http://git-repo.info/zh_cn/docs/getting-started/quickstart/"},{"content":"依赖 git-repo 依赖 git，在安装 git-repo 之前，需要确保已经安装了 git 2.10.0 以上版本。\n下载和安装 git-repo   访问 git-repo 的下载页面: https://github.com/aliyun/git-repo-go/releases。\n根据您的平台类型（Linux、Mac、或是 Windows），CPU 类型（amd64 或 386）下载并展开压缩包。\n  如果是 Linux 或者 Mac OS X 平台，为下载文件设置可执行权限。例如：\n $ chmod a+x git-repo    将下载的可执行文件复制到可执行目录。对于 Linux 和 Mac OS X 平台，这个目录可以是\n/usr/local/bin 或者其他可执行目录。对于 Windows 平台，这个目录可能是 C:\\Windows\\system32。\n $ cp git-repo /usr/local/bin/    ","description":"","id":1,"section":"docs","tags":null,"title":"安装 git-repo","uri":"http://git-repo.info/zh_cn/docs/getting-started/installation/"},{"content":"运行 git-repo 初次运行任意 git-repo 子命令，会完成一些初始化工作，例如：对 Git 配置文件进行扩展。\n因此 git-repo 安装完毕后，可以执行如下命令。\n$ git repo --version  说明：上面命令中 git 和 repo 之间可以不再需要短线，因为 Git 自动将具有类似 git-\u0026lt;subcmd\u0026gt; 的可执行文件视为自己的子命令。\n查看 git-repo 的帮助 执行下面命令查看 git-repo 的帮助：\n$ git repo -h  或者\n$ git repo  注意：如果使用 git repo --help 或者 git help repo，则无法显示 git-repo 的帮助。因为这些命令激活了 git 的 man 手册，而非 git-repo 内置的帮助系统。\ngit repo 有很多子命令。可以用如下命令查看子命令的帮助：\n$ git repo help init $ git repo help sync  ","description":"","id":2,"section":"docs","tags":null,"title":"运行 git-repo","uri":"http://git-repo.info/zh_cn/docs/getting-started/running/"},{"content":"升级 git-repo 运行下面命令升级 git-repo：\n$ git repo upgrade  自动下载相应平台的 git-repo 升级包，完成应用的替换和升级。\n如果由于文件权限或者其它原因导致升级失败，会给出错误提示。例如：\n$ git repo upgrade Download git-repo: ############################################################ 100% +--------------------------------------------------------------------------------+ | Fail to upgrade. Please copy | | /var/folders/5d/21v9l2z12j/T/git-repo-0.2.0-619707833 | | to | | /usr/bin/git-repo | | by hands | +--------------------------------------------------------------------------------+ Error: upgrade failed  遇到类似上面的错误提示，手工完成文件复制。例如：\n$ sudo cp /var/folders/5d/21v9l2z12j/T/git-repo-0.2.0-619707833 /usr/bin/git-repo  ","description":"","id":3,"section":"docs","tags":null,"title":"升级 git-repo","uri":"http://git-repo.info/zh_cn/docs/getting-started/upgrade/"},{"content":"大多数用户参与的项目是一个代码仓。对于单仓库操作， git-repo 提供了如下命令扩展：\n git peer-review，或 git pr: 创建代码评审。 git download: 下载评审的代码到本地。 git abandon: 清理当前完成评审发起的分支。  使用 git-repo 针对单仓库系统的示意如下：\n  图: git-repo for multiple repositories\n  ","description":"","id":4,"section":"docs","tags":null,"title":"单仓库协同概览","uri":"http://git-repo.info/zh_cn/docs/single-repo/overview/"},{"content":"git-repo 针对常用的单仓库的工作区，提供了快捷的创建代码评审的命令：git peer-review。该命令可以简写为 git pr 或者 git review。\n1. 创建代码评审 使用 git peer-review 命令创建代码评审的步骤如下：\n1.1 克隆远程仓库到工作区 克隆远程仓库到本地工作区。（如果工作区中已经存在该仓库，则忽略此步骤。）\n$ git clone https://codeup.teambition.com/git-repo/demo.git  切换到本地仓库的工作区：\n$ cd demo  1.2 创建特性分支 在本地工作区中创建新的工作分支。这个步骤不是必须的，使用当前分支（如 master 分支）也可以。但是如果需要在一个工作区目录进行不同特性的开发，则创建分支是必要的，否则多个特性的代码可能混在同一个代码评审任务中，或相互覆盖。\n$ git checkout -b topic1 origin/master  上面命令的两个参数要重点说明一下：\n 参数 -b topic1 设定了新的工作分支的名称。 最后的 origin/master 参数，则是为了将新建分支和上游的 master 分支建立关联。这个参数很重要，如果忘了添加该参数，则在用 git peer-review 创建代码评审时，会提示补救方法。  1.3 工作区内开发和提交 在工作区中进行代码开发工作，使用标准的 git 命令进行提交。\n1.4 发起代码评审 当完成本地开发后，执行如下命令推送本地改动并创建代码评审：\n$ git pr  该命令的参数有很多，可以设置代码评审需要的各项参数，例如：\n  指定评审者和关注者。多个用户名之间可以用（半角）逗号分开。\n $ git pr --reviewers 星楚,澳明 --cc 知忧    设定代码评审处于草稿状态，可以发表评审意见，但是不能合入。\n $ git pr --draft    如果当前分支相比远程分支没有新提交，则不会创建代码评审，显示提示信息如下：\n$ git pr NOTE: no branches ready for upload  如果已经发起过一次代码评审，且之后没有代码改动，也不会执行。显示的提示信息如下：\n$ git pr NOTE: no change in project . (branch topic1) since last upload NOTE: no branches ready for upload  如果本地分支未跟踪某一个远程分支，则 git pr 命令不知道该向哪个远程分支发起代码评审。必须设置本地分支和远程分支的跟踪，才可以发起代码评审。命令报错信息如下：\n$ git pr FATAL: upload failed: cannot find tracking branch Please run command \u0026quot;git branch -u \u0026lt;upstream\u0026gt;\u0026quot; to track a remote branch. E.g.: git branch -u origin/master  参照提示信息中的命令，建立工作区本地分支和远程分支的跟踪关系。\n1.5 代码评审的编辑界面 输入 git pr 命令后，会打开一个编辑器，内容是此次代码评审的各项可定制的参数，内容如下：\n############################################################################## # Step 1: Input your options for code review # # Note: Input your options below the comments and keep the comments unchanged ############################################################################## # [Title] : one line message below as the title of code review # [Description] : multiple lines of text as the description of code review # [Issue] : multiple lines of issue IDs for cross references # [Reviewer] : multiple lines of user names as the reviewers for code review # [Cc] : multiple lines of user names as the watchers for code review # [Draft] : a boolean (yes/no, or true/false) to turn on/off draft mode # [Private] : a boolean (yes/no, or true/false) to turn on/off private mode ############################################################################## # Step 2: Select project and branches for upload # # Note: Uncomment the branches to upload, and not touch the project lines ############################################################################## # # project ./: branch topic1 ( 3 commit(s)) to remote branch master: # 03c01e211122b49fe05f48e08fd3e1dd1c52e57e # ec78989440697fbc13bfbd3ea082fe9b3fc5f2d7 # 4e599aa284ed64ba12ba1b5b06fbbd3199846434  其中以字符 \u0026ldquo;#\u0026rdquo; 开始的行是注释，不要改动注释行，因为 git-repo 要根据注释行的内容判断用户输入内容用于更改哪项代码评审的参数设置。 例如：\n 在 \u0026ldquo;# [Title]\u0026rdquo; 行的下面添加的内容，成为代码评审的标题。默认用提交说明的标题作为代码评审标题。 在 \u0026ldquo;# [Description]\u0026rdquo; 行的下面添加的内容，成为代码评审的详细描述。默认用提交说明的内容作为代码评审的详细描述。 在 \u0026ldquo;# [Issue]\u0026rdquo; 行的下面如果添加 Issue ID，则将代码评审和问题之间的建立关联。 在 \u0026ldquo;# [Reviewer]\u0026rdquo; 行的下面添加代码评审者姓名，一个一行，或者用逗号分隔。 在 \u0026ldquo;# [Cc]\u0026rdquo; 行的下面添加代码评审的关注者姓名，一个一行，或者用逗号分隔。 在 \u0026ldquo;# [Draft]\u0026rdquo; 行的下面如果输入 yes，则表明要创建一个草稿模式的代码评审。 在最下面的 \u0026ldquo;Step 2\u0026rdquo; 区域，显示当前项目将要上传到远程仓库的分支和提交列表。检查提交列表，如果不想创建此次代码评审，则将 \u0026ldquo;branch \u0026hellip;\u0026rdquo; 的行注释掉，或者删掉，则此次创建代码评审的任务终止。  保存内容，退出编辑器，则开始向服务端推送代码，并开始代码评审的创建。\n编辑的内容会以模板的方式保存，以便在下一次执行 git pr 时复用。\n1.6 完成代码评审的创建 git pr 命令执行完毕后，显示代码评审创建成功的消息，示例如下：\nremote: +----------------------------------------------------------------+ remote: | Merge Request #7937 was created or updated. | remote: | View merge request at URL: | remote: | https://codeup.teambition.com/git-repo/demo/merge_request/7937 | remote: +----------------------------------------------------------------+ To ssh://codeup.teambition.com/git-repo/demo.git * [new branch] topic1 -\u0026gt; refs/for/master/topic1  注意：提示信息中包含创建成功的代码评审的 URL 地址，通过浏览器访问该地址，显示创建好的代码评审。\n1.7 服务器端仓库的变化 通过命令行工具在服务器端创建代码评审，服务端不会创建新的分支，但是为了方便用户远程下载评审代码，仓库中生成了一个特殊的引用。\n例如上面创建的第 7937 号代码评审，会创建包含该评审 ID 号的特殊引用，如：refs/merge-requests/7937/head。下载该待评审的代码，可以使用如下命令：\n$ git fetch origin refs/merge-requests/7937/head From https://codeup.teambition.com/git-repo/demo.git * branch refs/merge-requests/7937/head -\u0026gt; FETCH_HEAD  检出相关代码：\n$ git checkout FETCH_HEAD  git-repo 提供了一个便捷的 download 子命令完成上述操作。\n2. 重新发送，刷新代码评审 代码评审很少一蹴而就，针对评审者的意见，开发者（评审任务的创建者）往往需要重新上传代码刷新代码评审。对于阿里巴巴代码平台上创建的代码评审任务，重复执行 git pr 命令即可。\n  开发者首先在本地工作区修改代码。\n  执行如下命令，向远程仓库推送并刷新代码评审任务：\n $ git pr    3. 多人协同 代码评审者收到代码评审任务后，除了可以在代码评审 web 界面中添加评论之外，还可以使用 git-repo 更改评审中的代码。\n首先代码评审者在本地工作区（指向同一代码仓库）中，使用 git download 命令下载该代码评审任务指定的代码。例如下载 ID 为 7937 的代码评审：\n$ git download 7937  执行该命令后，本地工作区切换到该代码评审指向的提交。创建一个本地分支，例如：code-review 分支\n$ git checkout -b code-review  代码评审者在这个分支中进行修改，并完成本地的代码提交。\n然后代码评审者通过如下命令向远程服务器推送，并更新相应的代码评审。\n$ git pr --change 7937  说明：多人协同模式只支持 AGit-Flow 服务，而不支持 Gerrit 服务。\n","description":"","id":5,"section":"docs","tags":null,"title":"git peer-review","uri":"http://git-repo.info/zh_cn/docs/single-repo/git-peer-review/"},{"content":"功能 git download 是 git-repo 的一个别名命令，实现下载代码评审的源代码。默认使用 checkout 命令检出待评审的提交。\n命令格式 git download [options] \u0026lt;Merge-Request-ID\u0026gt; git download [options] \u0026lt;Change-ID\u0026gt;/\u0026lt;Patch-ID\u0026gt;  说明:\n 对于支持 AGit-Flow 协议的仓库，使用 \u0026lt;Merge-Request-ID\u0026gt; 格式下载评审代码。 对于属于 Gerrit 服务上的仓库，则使用 \u0026lt;Change-ID\u0026gt;/\u0026lt;Patch-ID\u0026gt; 格式，即斜线分隔的两个数字。  选项 主要的选项如下：\n -c, --cherry-pick：使用 cherry-pick 命令拣选代码评审的提交。 -f, --ff-only：使用 \u0026ndash;ff-only 参数合并代码评审的提交。 -r, --revert：只适用于 Gerrit，撤销评审的提交。  ","description":"","id":6,"section":"docs","tags":null,"title":"git download","uri":"http://git-repo.info/zh_cn/docs/single-repo/git-download/"},{"content":"功能 git abandon 是 git-repo 的一个别名命令，清理已经发起代码评审的本地分支。\n如果使用 --force 参数，强制删除分支，等价于 git branch -D \u0026lt;branchname\u0026gt; 命令。\n如果不使用 --force 参数（默认），则只清理已经发起代码评审的本地分支。\n命令格式 git abandon [options]  选项 主要的选项如下：\n --all: 删除所有分支。 -b, --branch：只删除指定分支。 --force：强制删除，即使本地分支尚未发起代码评审。  ","description":"","id":7,"section":"docs","tags":null,"title":"git abandon","uri":"http://git-repo.info/zh_cn/docs/single-repo/git-abandon/"},{"content":"在实践中，Git 大仓库存在着诸多问题：下载慢、不能对授权进行精细控制。解决大仓库的一个有效方案是化整为零：将大仓库拆分为多仓库。\n为了实现多仓库像一个仓库一样工作，Git提供一个原生的 submodule 方案，但是这个方案问题很多。例如：子模组固定在某个版本上，而不能实现随上游仓库分支更新而更新。多人修改子模组仓库，冲突从文件级别放大到仓库级别，让子模组的冲突不易解决。\nAndroid 项目创造了一个新的方案。即使用 XML 格式文件（manifest 清单文件）定义一个项目的多仓库关联，然后用 repo 客户端工具操作多仓库。\ngit-repo 使用 go 语言重新实现了 Android repo 工具多仓库管理功能，目标是实现和 Android repo 工具的 100% 兼容。\ngit repo 命令行格式如下：\ngit repo \u0026lt;子命令\u0026gt; \u0026lt;参数\u0026gt;  查看 git-repo 的帮助，使用命令：\ngit repo help git repo help \u0026lt;子命令\u0026gt;  使用 git-repo 管理多个代码仓库的典型使用场景，如下图所示：\n  图: git-repo for multiple repositories\n  上面的演示场景中，主要步骤如下：\n  创建一个空目录，作为工作区。\n $ mkdir workspace $ cd workspace    通过克隆 manifest 清单仓库，完成工作区的初始化。\n $ git repo init -u \u0026lt;manifest-url\u0026gt;  例如:\n $ git repo init -u https://codeup.teambition.com/git-repo/manifests.git    下载相关仓库代码\n $ git repo sync    创建开发分支\n $ git repo start --all \u0026lt;topic-branch\u0026gt;  例如：\n $ git repo start --all jx/topic1    在工作区中开发，每个仓库的改动单独完成本地提交。\n  执行下面命令，会扫描工作区所有仓库的改动，逐个向上游仓库发起代码评审。\n $ git repo upload    ","description":"","id":8,"section":"docs","tags":null,"title":"多仓库协同概览","uri":"http://git-repo.info/zh_cn/docs/multi-repos/overview/"},{"content":"Manifest 清单仓库和 Manifest 清单文件 定义多仓库关联的清单文件（manifest 文件）保存于一个仓库中，这个仓库称为 manifest 仓库。仓库中默认的 manifest 清单文件名为 default.xml，示例如下。（仓库中可以包含多个 XML 文件，但是除了默认的 default.xml 之外，其他 XML 文件需要通过命令行的相关参数显式的指定。）\n\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot;?\u0026gt; \u0026lt;manifest\u0026gt; \u0026lt;remote name=\u0026quot;origin\u0026quot; fetch=\u0026quot;..\u0026quot; revision=\u0026quot;master\u0026quot; review=\u0026quot;https://codeup.teambition.com\u0026quot; /\u0026gt; \u0026lt;remote name=\u0026quot;github\u0026quot; fetch=\u0026quot;https://github.com\u0026quot; revision=\u0026quot;master\u0026quot; review=\u0026quot;\u0026quot; /\u0026gt; \u0026lt;default remote=\u0026quot;origin\u0026quot; revision=\u0026quot;master\u0026quot; sync-j=\u0026quot;4\u0026quot; /\u0026gt; \u0026lt;project name=\u0026quot;aliyun/git-repo-go\u0026quot; path=\u0026quot;git-repo\u0026quot; groups=\u0026quot;app\u0026quot;\u0026gt; \u0026lt;linkfile src=\u0026quot;README.md\u0026quot; dest=\u0026quot;README.md\u0026quot;\u0026gt;\u0026lt;/linkfile\u0026gt; \u0026lt;/project\u0026gt; \u0026lt;project name=\u0026quot;aliyun/git-repo-go-doc\u0026quot; path=\u0026quot;website\u0026quot; groups=\u0026quot;app\u0026quot;/\u0026gt; \u0026lt;project name=\u0026quot;jiangxin/goconfig\u0026quot; path=\u0026quot;lib/goconfig\u0026quot; groups=\u0026quot;lib\u0026quot; remote=\u0026quot;github\u0026quot; /\u0026gt; \u0026lt;project name=\u0026quot;jiangxin/multi-log\u0026quot; path=\u0026quot;lib/multi-log\u0026quot; groups=\u0026quot;lib\u0026quot; remote=\u0026quot;github\u0026quot; /\u0026gt; \u0026lt;/manifest\u0026gt;  这是一个标准的 XML 文件，根元素为 manifest，关于该文件格式的解读如下。\nremote 元素 一个 Manifest 文件中可以包含多个 remote 元素。每一个 remote 元素定义了一个远程服务器。每个 project 元素都关联唯一一个 remote 元素。remote 元素包括的属性如下：\n name 定义 remote 的名称。仓库克隆时将以该名称建立和远程仓库的关联。 fetch 定义服务器 URL 地址。如果是 fetch 是相对地址，则以 manifest 仓库地址（git-repo init -u \u0026lt;URL\u0026gt; 设定的地址）为基准，计算得出。当一个项目被克隆时，将通过 fetch 定义的服务器 URL 地址和项目 name 字段组合得到仓库的克隆地址。 revision 定义项目的默认分支。 review 参数设置 git-repo 发动集中式评审的服务器地址。  default 元素 当项目（project）元素没有设置 remote、revison 等属性，则直接使用 default 元素中相关设置。即 default 元素为 project 元素相关属性的缺省值。\nproject 元素 每一个 project 元素定义一个仓库。其中关键属性如下：\n 属性 name 既作为项目的名称，又和 remote 的 fetch 字段一起组合出仓库的 URL 地址。 属性 path 是一个相对路径，是仓库在本地工作区的检出路径。 属性 groups 将项目分组，用作项目的筛选。例如在 git repo init -g \u0026lt;gorup 命令中进行设置。 属性 remote 设置项目对应的远程源仓库。  元素 project 还可以嵌套，嵌套内部的 project 路径以嵌套外部项目的路径为基准。\n元素 project 还可以包含 linkfile、copyfile 等元素，完成文件的链接和拷贝。\n更多示例参见 Android 项目的 manifest 仓库：\n地址：https://android.googlesource.com/platform/manifest  ","description":"","id":9,"section":"docs","tags":null,"title":"Manifest 格式","uri":"http://git-repo.info/zh_cn/docs/multi-repos/manifest-format/"},{"content":"功能 初始化当前工作区，或修改前一次 git repo init 执行时的参数设置。\n当 git repo init 命令执行完毕后，会在工作区中创建子目录 .repo。其中包含 manifest 清单仓库（.repo/manifests），以及清单文件（.repo/manifest.xml）文件。\n部分 git repo init 命令的参数会以 git 配置变量方式保存在 .repo/manifests.git 仓中，例如 -m \u0026lt;name\u0026gt;、-g \u0026lt;groups\u0026gt; 参数，就记录在 git 配置文件的 [manifest] 小节中。\n命令格式 git repo init -u \u0026lt;URL\u0026gt; [options...]  选项 主要的选项如下：\n -u \u0026lt;URL\u0026gt;：指定 manifests 清单仓库的 URL 地址。 -b \u0026lt;branch\u0026gt;：指定检出的 manifests 清单仓库分支，默认使用 master 分支。 -m \u0026lt;name\u0026gt;：指定使用的 manifest 清单文件名称，默认使用 default.xml 文件。 -g \u0026lt;groups\u0026gt;：指定项目分组。可以使用逗号分隔多个分组。分组在 manifest 清单文件中定义。  ","description":"","id":10,"section":"docs","tags":null,"title":"git repo init","uri":"http://git-repo.info/zh_cn/docs/multi-repos/git-repo-init/"},{"content":"功能 执行 sync 子命令，会在工作区克隆、检出、更新 manifest 清单中包含的仓库。\n首先更新 manfiest 仓库。\n和上一次更新的项目列表（.repo/project.list 文件）做对比，如果 manifest 中包含新增项目，则克隆和检出新项目，如果 manifest 清单中移除部分项目，则工作区中删除相关项目（如果这些项目中未做修改的话）。\n然后逐一更新工作区中的项目。\n  如果项目尚未同步到工作区，则 git repo sync 相当于 git clone。\n  如果项目已经同步到工作区，则 git repo sync 相当于：\n git remote update git rebase origin/branch    如果 git rebase 操作导致合并冲突，请使用常规 git 命令（例如 git rebase --continue）解决冲突。\n  命令格式 git repo sync [options...]  选项 主要的选项如下：\n  -c：只从服务端获取当前分支。\n  -d：工作区项目进入分离头指针状态，并切换到 manifest 清单文件指定的提交。该参数对于编译构建时严格按照 manifest 清单文件检出提交，丢弃工作区本地修改，非常有用。\n  -f：即使某个项目同步失败，也继续同步其他项目。\n  -j \u0026lt;num\u0026gt;：设定并发数。默认 4 个并发。\n  -n：只做网络端操作。即相当于只进行 git fetch 操作，不修改本地仓库的检出。\n  -l：只做本地端操作。即相当于只进行 git checkout 操作，而不进行任何网络操作。\n  ","description":"","id":11,"section":"docs","tags":null,"title":"git repo sync","uri":"http://git-repo.info/zh_cn/docs/multi-repos/git-repo-sync/"},{"content":"功能 以 manifest 清单仓库指定的版本为基准，为项目创建分支或切换分支。\n命令格式 只对指定的项目，创建或切换分支：\ngit repo start \u0026lt;branch-name\u0026gt; [project...]  为所有项目创建或切换分支，分支名 ：\ngit repo start --all \u0026lt;branch-name\u0026gt;  ","description":"","id":12,"section":"docs","tags":null,"title":"git repo start","uri":"http://git-repo.info/zh_cn/docs/multi-repos/git-repo-start/"},{"content":"功能 创建代码评审。\n对于指定的项目，git-repo 会将本地分支与上一次执行 git repo upload 时上传的提交做比较，（上一次上传提交记录在 refs/published/\u0026lt;branch-name\u0026gt; 的引用中），提示您选择一个或多个尚未上传可供审核的分支。\ngit repo upload 命令会启动一个编辑器，编辑器中的内容是此次代码评审的各项可定制的参数，以及待上传的项目和分支列表。\n示例如下：\n############################################################################## # Step 1: Input your options for code review # # Note: Input your options below the comments and keep the comments unchanged ############################################################################## # [Title] : one line message below as the title of code review # [Description] : multiple lines of text as the description of code review # [Issue] : multiple lines of issue IDs for cross references # [Reviewer] : multiple lines of user names as the reviewers for code review # [Cc] : multiple lines of user names as the watchers for code review # [Draft] : a boolean (yes/no, or true/false) to turn on/off draft mode # [Private] : a boolean (yes/no, or true/false) to turn on/off private mode ############################################################################## # Step 2: Select project and branches for upload # # Note: Uncomment the branches to upload, and not touch the project lines ############################################################################## # # project foo: # branch topic1 ( 3 commit(s)) to remote branch master: # 03c01e211122b49fe05f48e08fd3e1dd1c52e57e # ec78989440697fbc13bfbd3ea082fe9b3fc5f2d7 # 4e599aa284ed64ba12ba1b5b06fbbd3199846434 # # project bar: # branch topic1 ( 2 commit(s)) to remote branch master: # 47a3cae46019893db78a19906dda97825279f288 # ced1a1d6e16bc3f8051f87621eb69ba2a7e10672  Step 1 中以字符 \u0026ldquo;#\u0026rdquo; 开始的行是注释，不要改动注释行，因为 git-repo 要根据注释行的内容判断用户输入内容用于更改哪项代码评审的参数设置。 例如：\n 在 \u0026ldquo;# [Title]\u0026rdquo; 行的下面添加的内容，成为代码评审的标题。默认用提交说明的标题作为代码评审标题。 在 \u0026ldquo;# [Description]\u0026rdquo; 行的下面添加的内容，成为代码评审的详细描述。默认用提交说明的内容作为代码评审的详细描述。 在 \u0026ldquo;# [Issue]\u0026rdquo; 行的下面如果添加 Issue ID，则将代码评审和问题之间的建立关联。 在 \u0026ldquo;# [Reviewer]\u0026rdquo; 行的下面添加代码评审者姓名，一个一行，或者用逗号分隔。 在 \u0026ldquo;# [Cc]\u0026rdquo; 行的下面添加代码评审的关注者姓名，一个一行，或者用逗号分隔。 在 \u0026ldquo;# [Draft]\u0026rdquo; 行的下面如果输入 yes，则表明要创建一个草稿模式的代码评审。  在最下面的 \u0026ldquo;Step 2\u0026rdquo; 区域，显示当前项目将要上传到远程仓库的分支和提交列表。检查提交列表，如果不想创建此次代码评审，则将 \u0026ldquo;branch \u0026hellip;\u0026rdquo; 的行注释掉，或者删掉，如果需要为此项目和分支创建代码评审，则打开对应的 \u0026ldquo;branch \u0026hellip;\u0026rdquo; 行。\n例如将 project foo 的 branch topic1 所在行的注释去掉，而保留 project bar 的 branch topic1 行的注释。如下：\n############################################################################## # Step 2: Select project and branches for upload # # Note: Uncomment the branches to upload, and not touch the project lines ############################################################################## # # project foo: branch topic1 ( 3 commit(s)) to remote branch master: # 03c01e211122b49fe05f48e08fd3e1dd1c52e57e # ec78989440697fbc13bfbd3ea082fe9b3fc5f2d7 # 4e599aa284ed64ba12ba1b5b06fbbd3199846434 # # project bar: # branch topic1 ( 2 commit(s)) to remote branch master: # 47a3cae46019893db78a19906dda97825279f288 # ced1a1d6e16bc3f8051f87621eb69ba2a7e10672  保存并退出编辑器，则只向 project foo 发起代码评审，而不会向 project bar 发起代码评审。\n命令格式 git repo upload [options...] [project...]  选项 主要的选项如下：\n --cbr：为当前分支的修改创建代码评审。 --br \u0026lt;branch-name\u0026gt;：为指定的分支中的修改创建代码评审。 --re \u0026lt;user1,user2,...\u0026gt;：设置代码评审人。 --cc \u0026lt;user1,user2,...\u0026gt;：设置代码评审的关注人。 --title \u0026lt;title\u0026gt;：设置代码评审的标题。 --description \u0026lt;description\u0026gt;：设置代码评审的描述。 --single：单仓模式，可用于不使用 manifest 清单仓库的单仓库项目。  ","description":"","id":13,"section":"docs","tags":null,"title":"git repo upload","uri":"http://git-repo.info/zh_cn/docs/multi-repos/git-repo-upload/"},{"content":"功能 实现下载代码评审的源代码。默认使用 checkout 命令检出待评审的提交。\n命令格式 git repo download [options] \u0026lt;project\u0026gt; \u0026lt;Merge-Request-ID\u0026gt; ... git repo download [options] \u0026lt;project\u0026gt; \u0026lt;Change-ID\u0026gt;/\u0026lt;Patch-ID\u0026gt; ...  说明:\n \u0026lt;project\u0026gt; 和代码评审ID 成对出现。如果省略 \u0026lt;project\u0026gt; 默认为当前仓库。 对于阿里巴巴代码平台上的仓库，使用 \u0026lt;Merge-Request-ID\u0026gt; 下载评审代码。 对于 Gerrit 上的仓库，要使用 \u0026lt;Change-ID\u0026gt;/\u0026lt;Patch-ID\u0026gt;，即斜线分隔的两个数字。  选项 主要的选项如下：\n -c, --cherry-pick：使用 cherry-pick 命令拣选代码评审的提交。 -f, --ff-only：使用 \u0026ndash;ff-only 参数合并代码评审的提交。 -r, --revert：只适用于 Gerrit，撤销评审的提交。  ","description":"","id":14,"section":"docs","tags":null,"title":"git repo download","uri":"http://git-repo.info/zh_cn/docs/multi-repos/git-repo-download/"},{"content":"功能 该命令提供一个迭代器。可以为指定的每个项目运行指定的 shell 命令。\n在 git repo forall 的 shell 命令中，可使用下列额外的环境变量：\n REPO_PROJECT 是项目的唯一名称。 REPO_PATH 是相对于客户端根目录的路径。 REPO_REMOTE 是清单中远程系统的名称。  命令格式 git repo forall [project-list] -c command  选项 主要的选项如下：\n -c：要运行的命令和参数。此命令会通过 /bin/sh 进行评估，它之后的任何参数都将作为 shell 位置参数传递。 -e：如果一条命令执行失败，整个命令终止执行。 -p：在所指定命令的输出结果之前显示项目标头。 -g \u0026lt;groups\u0026gt;：通过组筛选项目，只对筛选后的项目执行指定命令。 -r \u0026lt;regexp\u0026gt;：通过正则表达式匹配项目名称，匹配的项目执行指定命令。 -i \u0026lt;regexp\u0026gt;：通过正则表达式排除项目名称，没有匹配的项目执行指定命令。  示例   在每个项目中执行 shell 命令，查看当前目录\n $ git repo forall -c 'echo \u0026quot;Project $REPO_PROJECT in `pwd`\u0026quot;' Project git-repo/demo in /Users/jiangxin/work/teambition/git-repo-demo/demo Project git-repo/demo-vendor in /Users/jiangxin/work/teambition/git-repo-demo/demo/vendor Project git-repo/demo-doc in /Users/jiangxin/work/teambition/git-repo-demo/doc    显示最新一条 git 日志\n $ git repo forall -p -- git log -1 --oneline project demo/ 649941d topic1: initial project demo/vendor/ 443693b Initial vendor for project demo project doc/ 32f0be3 Initial doc for demo    ","description":"","id":15,"section":"docs","tags":null,"title":"git repo forall","uri":"http://git-repo.info/zh_cn/docs/multi-repos/git-repo-forall/"},{"content":"功能 显示项目工作区状态。每个项目的状态显示两个字符，分别表示索引、工作区的改动:\n在第一列中，大写字母表示索引中包含的更改。（相当于 git diff --cached。）\n   字母 含义 说明      | 没有变化 | 在 HEAD 与索引中相同    A | 已添加 | 不存在于 HEAD 中，但存在于索引中\nM | 已修改 | 存在于 HEAD 中，但索引中的文件已修改\nD | 已删除 | 存在于 HEAD 中，但不存在于索引中\nR | 已重命名 | 不存在于 HEAD 中，索引中文件的路径已更改\nC | 已复制 | 不存在于 HEAD 中，复制自索引中的另一个文件\nT | 模式已更改 | HEAD 与索引中的内容相同，但模式已更改\nU | 未合并 | HEAD 与索引之间存在冲突；需要加以解决\n在第二列中，小写字母表示工作区和索引之间的不同之处。（相当于 git diff。）\n   字母 含义 说明      | 新/未知 | 不存在于索引中，但存在于工作树中    m | 已修改 | 存在于索引中，也存在于工作树中（但已修改）\nd | 已删除 | 存在于索引中，但不存在于工作树中\n","description":"","id":16,"section":"docs","tags":null,"title":"git repo status","uri":"http://git-repo.info/zh_cn/docs/multi-repos/git-repo-status/"},{"content":"功能 删除已经发起代码评审的开发分支。\n如果使用 --force 参数，强制删除分支，等价于 git branch -D \u0026lt;branchname\u0026gt; 命令。\n如果不使用 --force 参数（默认），则只清理已经发起代码评审的本地分支。\n命令格式 git-repo abandon [options] [\u0026lt;project\u0026gt;...]  选项 主要的选项如下：\n --all: 删除所有分支。 -b, --branch：只删除指定分支。 --force：强制删除，即使本地分支尚未发起代码评审。  ","description":"","id":17,"section":"docs","tags":null,"title":"git repo abandon","uri":"http://git-repo.info/zh_cn/docs/multi-repos/git-repo-abandon/"},{"content":"功能 清理本地分支，删除已经被上游合并的本地分支。\n该命令等价于 git repo abandon --all [\u0026lt;project\u0026gt;...]。相比 git repo abandon 支持 --force 参数，本命名更加安全。\n命令格式 git-repo prune [\u0026lt;project\u0026gt;...]  ","description":"","id":18,"section":"docs","tags":null,"title":"git repo prune","uri":"http://git-repo.info/zh_cn/docs/multi-repos/git-repo-prune/"},{"content":"Changelog Changes of git-repo.\n0.7.1 (2020-01-02) New features:\n Add helper for protocol extension, and use can add external helper. Smart selection of remote if repository has many remotes defined. AGit-Flow 2.0: set AGIT_FLOW environment for git connection. AGit-Flow 2.0: support version of ssh_info response. AGit-Flow 2.0: multiple users working on one code review. AGit-Flow 2.0: force push prevention if oldoid is provided.  Refactors, Enhancements and bugfixes:\n Many refactors, such as project.Remote. upload: can upload repo managed by git-worktree path: IsGitDir work with git worktree command version: add compatible issue for version below 2.9.0 upload: fallback to ~/.git-repo/UPLOAD_OPTIONS if no file found  0.6.1 (2019-11-10)  manifest: repo compatible parsing for project revision  0.6.0 (2019-11-08) NOTE: All users are suggested to upgrade to this version. Local changed files\nwill not be overwritten.\n Show project path in log message as prompt init: force create default branch for manifest project sync: do not overwrite local changed files sync: sync -d: always detach even if nothing changed sync: should not make manifest project detached init: no need to set color if color.ui defined in git global/system config by setting app.git.repo.disabled can git-repo for certain workspace init: use git-init command to create repository  0.5.1 (2019-09-09) New features:\n upload: cache different upload options settings for different target branch upload: only show title and description in editor for upload for the 1st time Some commands work for repo in mirror mode  Refactors, Enhancements and bugfixes:\n Disable upx, because some Mac users report errors refactor: rename variables name, such as RepoRoot refactor: Add DotGit, SharedGitDir in repository  0.5.0 (2019-08-20) New features:\n New cmd: git repo abandon New cmd: git repo prune New command: git repo manifest cmd/manifest: freeze manifest revision if provided -r option  Refactors, Enhancements and bugfixes:\n color: add Hilight and Dim methods refactor: do not check Remote type to get reviewable branch repository: get last modified of a revision bugfix: not change Revision during network-half refactor: make WorkRepository as embedding struct for Project go.mod: update goconfig, check cache against file size refactor: rename Path field name of Repository to RepoDir refactor: remove ObjectRepository from project refactor: IsClean only returns one boolean test: add test cases for cmd/manifest test: update test cases for manifest refactor: rename command executable entrance name test: remove pipes, which suppress errors being report  0.4.2 (2019-08-08)  Compress binaries using UPX  0.4.1 (2019-08-07)  peer-review: support \u0026ndash;remote and \u0026ndash;dest option New command: git repo list download: support \u0026ndash;remote option compatibility: Use push options only if git is greater than 2.10.0 compatibility: Show compatible issues of git versions compatibility: Fix compatible issue of Gerrit hook compatibility: Use absolute path for \u0026lsquo;include.path\u0026rsquo; directive README: add badge for CI build status compatibility: Use strings.Replace to be compatible with go 1.11 compatibility: enable GO111MODULE for build and test compatibility: remove test case which depends on higher version of git doc: add godoc download: cherry-pick all commits for one code review  0.3.1 (2019-6-26) Enhancement and bugfix:\n bugfix: add protection for write git extra config file Only set push.default to nothing if it is unset Makefile: build with vendor and new release target Ignore vendor dir filter: ignore errors for smudge debug: add more debug info for repo sync upload: clean published refs for single mode  0.3.0 (2019-6-22) DEPRECATED New Features:\n Add alias command: git download New command: download, for offline code review Add \u0026ndash;no-cache option to ignore ssh_info API cache config: add new filter driver keyword-subst New command: filter, for keyword-subst content filter Install Gerrit hooks if review server is Gerrit Set push.default to nothing if remote is reviewable  Enhancement and bugfix:\n test: change branch name to upper case for test goconfig: fix upper case section name issue refactor LoadRemote for single repository workspace ParseGitURL can parse file:// and other protocol test: add mock options for git-repo sync command test: add test cases for git-repo filter sync: default use 4 jobs test: add test case for git pr \u0026ndash;br  Not quit immediately if cannot get review URL refactor: delay load remote for GitWorkspace Only save config for DisableDefaultPush when necessary Format every multi-log imports by adding alias log Fix some spellings  0.2.1 (2019-6-26) Enhancement and bugfix:\n bugfix: add protection for write git extra config file Makefile: build with vendor and new release target  0.2.0 (2019-6-9) DEPRECATED  \u0026ldquo;git repo \u0026ndash;version\u0026rdquo; follows the same rule as version command test: add test cases for submodule projects refactor: urlJoin should keep spaces unchanged Add build tag for windows build support test: use git peer-review instead of git review When comparing, undefined version is lower than others New alias: git pr, stands for git peer-review version: check if git-repo aliases can be used safely Install ~/.git-repo/config.yml.example file refactor: store extra git config and comments in string  0.1.0 (2019-6-5)  upgrade: show download progress upgrade: add \u0026ndash;no-cert-checks option upgrade: validate package by sha256 sum and gpg signature refactor: viper only bind necessary flags in rootcmd bugfix: continue push if consume yes on dirty worktree  0.0.3 (2019-5-29) New feature:\n New command: git repo upgrade New command: git repo status New command: git-repo forall  Enhancement and bugfix:\n Get project\u0026rsquo;s HEAD from .gitdir inside worktree go.mod: update modules goconfig and multi-log refactor: move executeResult from forall to project sync: not quit if fail to check remote server type sync: return error if work repo is nil when syncing goconfig: fix index out of range bug upload: use knownReviewHosts to help to find review URL upload: show log info if cannot upload a branch upload: one dialog for options and branches edition upload: use more readable upload options message upload: New option \u0026ndash;no-edit Update edit script error message Open an editor for user to custom upload options refactor: parse reviewers later in UploadAndReport method  0.0.2 (2019-5-20)  test: add test case for install hooks Link Gerrit hooks when sync repo from Gerrit Install git-hook templates to ~/.git-repo/hooks LinkManifest failed if cannot find manifest file refactor: use NewEmptyRepoWorkSpace for initial workspace If init from a wrong URL, remove and quit sync: segfault: check if ws.Manifest is nil upload: add debug info for upload command Encode reviewers and cc using encodeString test: fixed review test URL If SSH port is 29418, set remote type to Gerrit Hide standard SSH port for SSHInfo refactor: handle review URL for single git repository Do not add \u0026ndash;receive-pack option for http URL when pushing Check git URL using config.ParseGitURL Not check ssh_info, if review URL is rsync protocol refactor: move git address pattern to config Read ReviewURL from git config remote.origin.review test: mock ssh-info API when calling git-repo sync sync: call ssh_info API and install hooks if remote is Gerrit test: add test cases for git review (upload \u0026ndash;single) Add alias command \u0026lsquo;git review\u0026rsquo;  0.0.1 (2019-5-14)  Initial version  ","description":"","id":19,"section":"","tags":null,"title":"","uri":"http://git-repo.info/zh_cn/changelog/"}]