[{"content":"Quick Start Install git-repo You can download git-repo from: https://github.com/aliyun/git-repo-go/releases.\nChoose the proper package according to your OS (Linux, Mac, or Windows), and architecture (amd or 386), download and extract the package.\nCopy the binary into executable PATH (e.g. /usr/local/bin on Linux or macOS) to complete the installation.\nRun git-repo for the first time Run any subcommand of git-repo, will perform some initialization tasks. e.g.:\n$ git repo version  Working on a single repository Make sure to setup a remote tracking branch correctly using:\n$ git branch -u origin/master  Create code review (pull request) from command line:\n$ git pr  Working on multiple repositories git-repo is compatible with Android repo, and can work on multiple repositories managed by a manifest repository.\n  Create a workspace.\n $ mkdir workspace $ cd workspace    Initialize workspace from a manifest project (repository), which has an XML file (e.g., default.xml) to describe the relationship of the sub-projects.\n $ git repo init -u \u0026lt;manifest repository\u0026gt;    Fetch all sub-projects and checkout to the local workspace.\n $ git repo sync    Create a local branch on all projects for development.\n $ git repo start --all \u0026lt;branch/name\u0026gt;    Working in the workspace and make new commits.\n  Run the following commands to send local commits to remote server to create code reviews (pull requests).\n $ git repo upload    ","description":"","id":0,"section":"docs","tags":null,"title":"Quick start","uri":"http://git-repo.info/en/docs/getting-started/quickstart/"},{"content":"Dependence Install git 2.10.0 or above before install/running git-repo.\nDownload and Install git-repo   Download the latest release of git-repo from: https://github.com/aliyun/git-repo-go/releases.\nChoose the proper package according to your OS (Linux, Mac, or Windows) and architecture (amd or 386), download and extract the package.\n  Make git-repo executable before install on Linux or macOS:\n $ chmod a+x git-repo    Move git-repo into an executable PATH (e.g., /usr/local/bin for Linux or macOS, C:\\Windows\\system32 for Windows):\n $ sudo mv git-repo /usr/local/bin/    ","description":"","id":1,"section":"docs","tags":null,"title":"Installation","uri":"http://git-repo.info/en/docs/getting-started/installation/"},{"content":"Execute git-repo for the first time git-repo will perform some initialization tasks on the first execution. See: git config extensions. Running any command will trigger the initialization tasks.\n$ git repo --version  Note: git-repo will be recognized as git subcommand so that we can execute git repo (without a dash).\nManual for git-repo Show help message of git-repo:\n$ git repo -h  or\n$ git repo  Show help message of of subcommands of git-repo, see the following examples:\n$ git repo help init $ git repo help sync  ","description":"","id":2,"section":"docs","tags":null,"title":"Running","uri":"http://git-repo.info/en/docs/getting-started/running/"},{"content":"Upgrade git-repo Upgrade git-repo to the latest version, using command:\n$ git repo upgrade  Will download and install the latest version of git-repo.\nIf the upgrade process failed because of permissions or other reasons, it would show instruction in the output message. Please follow the instruction for manual upgrade.\n$ git repo upgrade Download git-repo: ############################################################ 100% +--------------------------------------------------------------------------------+ | Fail to upgrade. Please copy | | /var/folders/5d/21v9l2z12j/T/git-repo-0.2.0-619707833 | | to | | /usr/bin/git-repo | | by hands | +--------------------------------------------------------------------------------+ Error: upgrade failed  For this case, run the instruction given by the example, e.g.:\n$ sudo cp /var/folders/5d/21v9l2z12j/T/git-repo-0.2.0-619707833 /usr/bin/git-repo  ","description":"","id":3,"section":"docs","tags":null,"title":"Upgrade","uri":"http://git-repo.info/en/docs/getting-started/upgrade/"},{"content":"git-repo provides several alias commands for git workflow on a single repository:\n git peer-review or git pr: publish local commits to create code review. git download: download specific code review from remote to the local repository. git abandon: prune already published local branch.  Demo for git workflow on a single repository:\n  Fig: git-repo for multiple repositories\n  ","description":"","id":4,"section":"docs","tags":null,"title":"Overview","uri":"http://git-repo.info/en/docs/single-repo/overview/"},{"content":"git-repo provides alias command git peer-review or git pr to create a code review on a single repository.\n1. Create a code review 1.1 Clone Clone remote repository to the local workspace (Ignore this step, if have local repository already):\n$ git clone https://codeup.teambition.com/git-repo/demo.git $ cd demo  1.2 Create a local topic branch This step is optional. If you want to work on several different tasks at the same local workspace, you must create a topic branch for each task. Otherwise, the code review will be overwritten.\n$ git checkout -b topic1 origin/master  Note:\n Use option -b topic1 to create a specific branch named \u0026ldquo;topic1\u0026rdquo;. New branch will be created from the commit pointed by the last argument origin/master, and the newly created branch will setup to track it.  1.3 Working in the worktree Create new commits in the worktree.\n1.4 Publish local commits to create a new code review Run the following command to publish local commits to remote server to create or update code review (pull request):\n$ git pr  git pr has many options, e.g.:\n  Assign reviewers and watchers. Multiple users can be separated by commas.\n $ git pr --reviewers user1,user2 --cc user3    Create a code review in draft mode. A draft mode code review cannot be merged.\n $ git pr --draft    If nothing changed in the local repository, will show the following error message:\n$ git pr NOTE: no branches ready for upload  If all local commits have already been published, execute another git pr will show the following message:\n$ git pr NOTE: no change in project . (branch topic1) since last upload NOTE: no branches ready for upload  If there is no tracking branch, git pr doesn\u0026rsquo;t know the target branch to create a code review. Will show the following error message:\n$ git pr FATAL: upload failed: cannot find tracking branch Please run command \u0026quot;git branch -u \u0026lt;upstream\u0026gt;\u0026quot; to track a remote branch. E.g.: git branch -u origin/master  You can follow the instruction in the message to setup a remote tracking branch.\n1.5 User interface of \u0026ldquo;git pr\u0026rdquo; When running git pr, will open an editor with the following text:\n############################################################################## # Step 1: Input your options for code review # # Note: Input your options below the comments and keep the comments unchanged ############################################################################## # [Title] : one-line message below as the title of code review # [Description] : multiple lines of text as the description of code review # [Issue] : multiple lines of issue IDs for cross references # [Reviewer] : multiple lines of user names as the reviewers for code review # [Cc] : multiple lines of user names as the watchers for code review # [Draft] : a boolean (yes/no, or true/false) to turn on/off draft mode # [Private] : a boolean (yes/no, or true/false) to turn on/off private mode ############################################################################## # Step 2: Select project and branches for upload # # Note: Uncomment the branches to upload, and not touch the project lines ############################################################################## # # project ./: branch topic1 ( 3 commit(s)) to remote branch master: # 03c01e211122b49fe05f48e08fd3e1dd1c52e57e # ec78989440697fbc13bfbd3ea082fe9b3fc5f2d7 # 4e599aa284ed64ba12ba1b5b06fbbd3199846434  The first section of the text is used for adding options for git pr. Lines begin with the character \u0026ldquo;#\u0026rdquo; are comments. Please do not change these comments, for git pr needs to find parameter names in the comments.\n Below the line started with \u0026ldquo;# [Title]\u0026quot;, add one-line title for the code review to be generated. Below the line started with \u0026ldquo;# [Description]\u0026quot;, add description for the code review to be generated. Below the line started with \u0026ldquo;# [Issue]\u0026quot;, add issue number for reference. Below the line started with \u0026ldquo;# [Reviewer]\u0026quot;, add reviewers (one reviewer on each line, or separated by commas). Below the line started with \u0026ldquo;# [Cc]\u0026quot;, add watchers. Below the line started with \u0026ldquo;# [Draft]\u0026quot;, input \u0026ldquo;yes\u0026rdquo; to turn on draft mode.  The second section lists branches of the current project that are ready to publish. Uncomment the branches you want to publish, and git pr will create code reviews for these branches.\nIf no branch is ready to publish (all branches are commented out), git pr will abort.\nSave the content and quit the editor, git pr will continue to send local commits to remote server to create/update a code review.\n1.6 Result of creating/updating a code review After executing git pr successfully, will show message of creating/updating a code review. The following message is an example of Alibaba code platform:\nremote: +----------------------------------------------------------------+ remote: | Merge Request #7937 was created or updated. | remote: | View merge request at URL: | remote: | https://codeup.teambition.com/git-repo/demo/merge_request/7937 | remote: +----------------------------------------------------------------+ To ssh://codeup.teambition.com/git-repo/demo.git * [new branch] topic1 -\u0026gt; refs/for/master/topic1  NOTE: in the above message, there is a URL to access the generated code review.\n1.7 Special reference of the code review for download A new special reference will be created inside the repository for user to access the generated code review. The special reference is not a branch or tag, and need to be fetched using a special command, e.g.:\n$ git fetch origin refs/merge-requests/7937/head From https://codeup.teambition.com/git-repo/demo.git * branch refs/merge-requests/7937/head -\u0026gt; FETCH_HEAD  Check out the fetched commit:\n$ git checkout FETCH_HEAD  NOTE: git-repo provides an alias command git download to download the specific code review.\n2. Update a code review If commits of the code review need to be updated, make changes in the local repository, and run the following command to update commits of the code review:\n$ git pr  3. Multi-user collaboration Run git pr on the same repository, with the same local branch, to the same remote branch, by the same user, will update commits of the same code review (pull request), instead of creating a new one.\nIf a different user, such as a reviewer, wants to update the commits of a code review, how can he/she do it?\nFirst, download the commits of the code review. Download pull request #7937 for example:\n$ git download 7937  Then, create a new local branch, such as:\n$ git checkout -b code-review  Make changes in the local repository.\nSend changes of the local repository to the remote server to update the specific pull request using command like:\n$ git pr --change 7937  ","description":"","id":5,"section":"docs","tags":null,"title":"git peer-review","uri":"http://git-repo.info/en/docs/single-repo/git-peer-review/"},{"content":"Description Download commits of the specific code review, and check out the tip commit by default.\ngit download is an alias command of git-repo.\nUsage git download [options] \u0026lt;Merge-Request-ID\u0026gt; git download [options] \u0026lt;Change-ID\u0026gt;/\u0026lt;Patch-ID\u0026gt;  Note:\n For AGit-Flow and other compatible services, use \u0026lt;Merge-Request-ID\u0026gt; as a argument. For Gerrit service, use \u0026lt;Change-ID\u0026gt;/\u0026lt;Patch-ID\u0026gt; format argument.  Options Available options:\n -c, --cherry-pick: Run cherry-pick after fetching. -f, --ff-only: Run merge --ff-only after fetching. -r, --revert: Revert specific change of Gerrit.  ","description":"","id":6,"section":"docs","tags":null,"title":"git download","uri":"http://git-repo.info/en/docs/single-repo/git-download/"},{"content":"Description Remove already published local branches. If option --force is given, will delete branch by force, just like git branch -D \u0026lt;branch-name\u0026gt;.\ngit abandon is an alias command of git-repo.\nUsage git abandon [options]  Options Available options:\n --all: Abandon all branches. -b, --branch: Abandon specific branch. --force: Delete by force, even local branch is not published yet.  ","description":"","id":7,"section":"docs","tags":null,"title":"git abandon","uri":"http://git-repo.info/en/docs/single-repo/git-abandon/"},{"content":"Git built-in solution for multiple repositories is git submodule. It is OK for the release of the source code of all related repositories, but it is bad for development because all sub repositories pin to specific commits.\nAndroid project introduced a better solution for the management of multiple repositories that the relationship of repositories is defined in an XML file in a manifest project. Android also introduced a new command-line tool named repo, which helps manage repositories.\ngit-repo is compatible with Android repo, can also manage multiple repositories. Usage of git-repo:\ngit repo \u0026lt;command\u0026gt; \u0026lt;arguments\u0026gt; ...  See help message, use:\ngit repo help git repo help \u0026lt;command\u0026gt;  The following example is how to manage multiple repositories using git-repo:\n  Fig: git-repo for multiple repositories\n  Main steps in the above example:\n  Create an empty directory as workspace.\n $ mkdir workspace $ cd workspace    Initialize workspace by cloning the manifest repository.\n $ git repo init -u \u0026lt;manifest-url\u0026gt;  Example:\n $ git repo init -u https://codeup.teambition.com/git-repo/manifests.git    Fetch and check out all related repositories.\n $ git repo sync    Create a topic branch on all projects for development.\n $ git repo start --all \u0026lt;topic-branch\u0026gt;  Example:\n $ git repo start --all jx/topic1    Work in the worktree, and create new commits.\n  Scan new commits in all repositories and publish new commits to create code reviews.\n $ git repo upload    ","description":"","id":8,"section":"docs","tags":null,"title":"Overview","uri":"http://git-repo.info/en/docs/multi-repos/overview/"},{"content":"Manifest file example In a manifest repository, there are one or more XML files, which define the relationship of all repositories of the project. The default manifest file in the manifest project is default.xml. See the following content of a manifest file as an example:\n\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot;?\u0026gt; \u0026lt;manifest\u0026gt; \u0026lt;remote name=\u0026quot;origin\u0026quot; fetch=\u0026quot;..\u0026quot; revision=\u0026quot;master\u0026quot; review=\u0026quot;https://codeup.teambition.com\u0026quot; /\u0026gt; \u0026lt;remote name=\u0026quot;github\u0026quot; fetch=\u0026quot;https://github.com\u0026quot; revision=\u0026quot;master\u0026quot; review=\u0026quot;\u0026quot; /\u0026gt; \u0026lt;default remote=\u0026quot;origin\u0026quot; revision=\u0026quot;master\u0026quot; sync-j=\u0026quot;4\u0026quot; /\u0026gt; \u0026lt;project name=\u0026quot;aliyun/git-repo-go\u0026quot; path=\u0026quot;git-repo\u0026quot; groups=\u0026quot;app\u0026quot;\u0026gt; \u0026lt;linkfile src=\u0026quot;README.md\u0026quot; dest=\u0026quot;README.md\u0026quot;\u0026gt;\u0026lt;/linkfile\u0026gt; \u0026lt;/project\u0026gt; \u0026lt;project name=\u0026quot;aliyun/git-repo-go-doc\u0026quot; path=\u0026quot;website\u0026quot; groups=\u0026quot;app\u0026quot;/\u0026gt; \u0026lt;project name=\u0026quot;jiangxin/goconfig\u0026quot; path=\u0026quot;lib/goconfig\u0026quot; groups=\u0026quot;lib\u0026quot; remote=\u0026quot;github\u0026quot; /\u0026gt; \u0026lt;project name=\u0026quot;jiangxin/multi-log\u0026quot; path=\u0026quot;lib/multi-log\u0026quot; groups=\u0026quot;lib\u0026quot; remote=\u0026quot;github\u0026quot; /\u0026gt; \u0026lt;/manifest\u0026gt;  The root element of the manifest XML file is manifest and has many other elements.\nElement remote One or more remote elements may be specified. Each remote element defines a remote server, which has a name, URL prefix, revision, and review URL. Every project should associate with one remote element.\nAttributes of the remote element:\n Attribute name: A short name unique to this manifest file. The name specified here is used as the remote name in each project\u0026rsquo;s .git/config, and is therefore automatically available to commands like git fetch, git remote, git pull, and git push. Attribute alias: The alias, if specified, is used to override name to be set as the remote name in each project\u0026rsquo;s .git/config. Its value can be duplicated while attribute name has to be unique in the manifest file. This helps each project to be able to have same remote name, which actually points to different remote URL. Attribute fetch: The Git URL prefix for all projects which use this remote. Each project\u0026rsquo;s name is appended to this prefix to form the actual URL used to clone the project. If fetch points to a relative path, it will form a real URL prefix from manifest repository URL, which is given by git repo init -u \u0026lt;URL\u0026gt; command line. Attribute revision: Name of a Git branch (e.g., master or refs/heads/master) or revision. Remotes with their own revision will override the default revision. Attribute review: Hostname of the code review server where reviews are uploaded to by git repo upload. This attribute is optional; if not specified, then git repo upload will not function.  Element default At most one default element may be specified. Its remote and revision attributes are used when a project element does not specify its own remote or revision attribute.\nElement project One or more project elements may be specified. Each element describes a single Git repository to be cloned into the client workspace. Project can be nested.\n Attribute name: A unique name of the project. The project\u0026rsquo;s name is appended onto its remote\u0026rsquo;s fetch URL to generate the actual URL to configure the Git remote with. Attribute path: An optional path relative to the top directory of the workspace where the Git working directory for this project should be placed. If not supplied, the project name is used. If the project has a parent element, its path will be prefixed by the parent\u0026rsquo;s. Attribute groups: List of groups to which this project belongs, whitespace or comma separated. All projects belong to the group \u0026ldquo;all\u0026rdquo;, and each project automatically belongs to a group of its \u0026ldquo;name:name\u0026rdquo; and \u0026ldquo;path:path\u0026rdquo;. Attribute remote: Name of a previously defined remote element. If not supplied, the remote given by the default element is used. Attribute revision: Name of the Git branch the manifest wants to track for this project, or revision used for checkout only. If not supplied, the revision given by the remote element is used if applicable, else the default element is used.  References:\n Manifest format of Android repo Android manifest file example  ","description":"","id":9,"section":"docs","tags":null,"title":"Manifest Format","uri":"http://git-repo.info/en/docs/multi-repos/manifest-format/"},{"content":"Description Initialize the current workspace or re-initialize workspace with different options.\nWill create .repo directory inside workspace while executing git repo init. There are one manifest repository and manifest file .repo/manifest.xml inside.\nSome options of git repo init will save as git configs in the .repo/manifests.git repository, such as -m \u0026lt;name\u0026gt;, -g \u0026lt;groups\u0026gt; options.\nUsage git repo init -u \u0026lt;URL\u0026gt; [options...]  Options Available options:\n -u \u0026lt;URL\u0026gt;: URL of manifest project. -b \u0026lt;branch\u0026gt;: Manifest branch or revision to be checked out (default \u0026ldquo;master\u0026rdquo;). -m \u0026lt;name\u0026gt;: Manifest file name used to initialize workspace (default \u0026ldquo;default.xml\u0026rdquo;). -g \u0026lt;groups\u0026gt;: Restrict manifest projects to ones with specified group(s) [default|all|G1,G2,G3|G4,-G5,-G6] (default \u0026ldquo;default\u0026rdquo;).  ","description":"","id":10,"section":"docs","tags":null,"title":"git repo init","uri":"http://git-repo.info/en/docs/multi-repos/git-repo-init/"},{"content":"Description Run git fetch and git checkout to downloads new changes and updates the working files in your local workspace. If you run repo sync without arguments, it synchronizes the files for all projects.\nWhen you run repo sync, this is what happens:\n  Update manifest project.\n  Compare with the project list file (if exist) generated by last git repo sync command, and remove obsolete projects (if nothing changed).\n  If the project has never been synchronized, then git repo sync is equivalent to git clone. All branches in the remote repository are copied to the local project directory.\n  If the project has been synchronized before, then git repo sync is equivalent to:\n git remote update git rebase origin/\u0026lt;branch\u0026gt;  The branch is the currently checked-out branch in the local project directory. If the local branch isn\u0026rsquo;t tracking a branch in the remote repository, then no synchronization occurs for the project.\n  If the Git rebase operation results in merge conflicts, please use the standard Git commands (for example, git rebase --continue) to resolve the conflicts.\n  After a successful run of git repo sync, the code in specified projects is up to date and synced with the code in the remote repository.\nUsage git repo sync [options...]  Options Available options:\n -c: Fetch only the current manifest branch from the server. -d: Switch specified projects back to the manifest revision. This is helpful if the project is currently on a topic branch, but the manifest revision is temporarily needed. -f: Proceed with syncing other projects even if a project fails to sync. -j \u0026lt;num\u0026gt;: Split the sync across threads for faster completion. Make sure not to overwhelm your machine by leaving some CPU reserved for other tasks. To see the number of available CPUs, first run: nproc \u0026ndash;all -q: Run quietly by suppressing status messages. -n：Only run network part, i.e., only run git fetch, do not run git checkout. -l：Only run local part, i.e., only run git checkout, and do not run git fetch.  ","description":"","id":11,"section":"docs","tags":null,"title":"git repo sync","uri":"http://git-repo.info/en/docs/multi-repos/git-repo-sync/"},{"content":"Description Begin a new branch for development, starting from the revision specified in the manifest.\nUsage Create a new branch for specific projects.\ngit repo start \u0026lt;branch-name\u0026gt; [project...]  Create a new branch for all projects.\ngit repo start --all \u0026lt;branch-name\u0026gt;  ","description":"","id":12,"section":"docs","tags":null,"title":"git repo start","uri":"http://git-repo.info/en/docs/multi-repos/git-repo-start/"},{"content":"Description Send changes to remote server to create code reviews.\nFor the specified projects, compares the local branches to the remote branches updated during the last git repo sync. git-repo prompts you to select one or more of the branches that haven\u0026rsquo;t been uploaded for review.\ngit repo upload command will start an editor for you with the following text as an example. Add custom options and choose the branches that need to be uploaded in the editor.\n############################################################################## # Step 1: Input your options for code review # # Note: Input your options below the comments and keep the comments unchanged ############################################################################## # [Title] : one-line message below as the title of code review # [Description] : multiple lines of text as the description of code review # [Issue] : multiple lines of issue IDs for cross references # [Reviewer] : multiple lines of user names as the reviewers for code review # [Cc] : multiple lines of user names as the watchers for code review # [Draft] : a boolean (yes/no, or true/false) to turn on/off draft mode # [Private] : a boolean (yes/no, or true/false) to turn on/off private mode ############################################################################## # Step 2: Select project and branches for upload # # Note: Uncomment the branches to upload, and not touch the project lines ############################################################################## # # project foo: # branch topic1 ( 3 commit(s)) to remote branch master: # 03c01e211122b49fe05f48e08fd3e1dd1c52e57e # ec78989440697fbc13bfbd3ea082fe9b3fc5f2d7 # 4e599aa284ed64ba12ba1b5b06fbbd3199846434 # # project bar: # branch topic1 ( 2 commit(s)) to remote branch master: # 47a3cae46019893db78a19906dda97825279f288 # ced1a1d6e16bc3f8051f87621eb69ba2a7e10672  The first section of the text is used for adding options for git repo upload. Lines begin with the character \u0026ldquo;#\u0026rdquo; are comments. Please do not change these comments, for git-repo needs to find parameter names in the comments.\n Below the line started with \u0026ldquo;# [Title]\u0026quot;, add one-line title for the code review to be generated. Below the line started with \u0026ldquo;# [Description]\u0026quot;, add description for the code review to be generated. Below the line started with \u0026ldquo;# [Issue]\u0026quot;, add issue number for reference. Below the line started with \u0026ldquo;# [Reviewer]\u0026quot;, add reviewers (one reviewer on each line, or separated by commas). Below the line started with \u0026ldquo;# [Cc]\u0026quot;, add watchers. Below the line started with \u0026ldquo;# [Draft]\u0026quot;, input \u0026ldquo;yes\u0026rdquo; to turn on draft mode.  The second section lists projects and branches that are ready to publish. Uncomment the branches you want to publish. git-repo will create code reviews for these publish branches.\nIf no branch is ready to publish (all branches are commented out), git repo upload will abort.\nSave the content and quit the editor, git-repo will continue to send local commits to remote repositories to create/update code reviews.\nFor example: in the following text, the leading character \u0026ldquo;#\u0026rdquo; at the beginning of the line of branch topic1 of project foo has been deleted, while other comment letter \u0026ldquo;#\u0026rdquo; are preserved:\n############################################################################## # Step 2: Select project and branches for upload # # Note: Uncomment the branches to upload, and not touch the project lines ############################################################################## # # project foo: branch topic1 ( 3 commit(s)) to remote branch master: # 03c01e211122b49fe05f48e08fd3e1dd1c52e57e # ec78989440697fbc13bfbd3ea082fe9b3fc5f2d7 # 4e599aa284ed64ba12ba1b5b06fbbd3199846434 # # project bar: # branch topic1 ( 2 commit(s)) to remote branch master: # 47a3cae46019893db78a19906dda97825279f288 # ced1a1d6e16bc3f8051f87621eb69ba2a7e10672  Save and quit the editor, git repo upload will only send changes of project foo, and create code review for it.\nUsage git repo upload [options...] [project...]  Options Available options:\n --cbr: Upload current git branch. --br \u0026lt;branch-name\u0026gt;: Upload specific branch. --re \u0026lt;user1,user2,...\u0026gt;: Request reviews from these people. --cc \u0026lt;user1,user2,...\u0026gt;: Also send email to these watchers. --title \u0026lt;title\u0026gt;: Set title for code review. --description \u0026lt;description\u0026gt;: Set description for code review.  ","description":"","id":13,"section":"docs","tags":null,"title":"git repo upload","uri":"http://git-repo.info/en/docs/multi-repos/git-repo-upload/"},{"content":"Description Download commits of the specific code review, and check out the tip commit by default.\nUsage git repo download [options] \u0026lt;project\u0026gt; \u0026lt;Merge-Request-ID\u0026gt; ... git repo download [options] \u0026lt;project\u0026gt; \u0026lt;Change-ID\u0026gt;/\u0026lt;Patch-ID\u0026gt; ...  Note:\n For AGit-Flow and other compatible services, use \u0026lt;Merge-Request-ID\u0026gt; as a argument. For Gerrit service, use \u0026lt;Change-ID\u0026gt;/\u0026lt;Patch-ID\u0026gt; format argument.  Options Available options:\n -c, --cherry-pick: Run cherry-pick after fetching. -f, --ff-only: Run merge --ff-only after fetching. -r, --revert: Revert specific change of Gerrit.  ","description":"","id":14,"section":"docs","tags":null,"title":"git repo download","uri":"http://git-repo.info/en/docs/multi-repos/git-repo-download/"},{"content":"Description This command provides an iterator, run a specific shell command on each project.\nThe following environments can be used in a shell command:\n REPO_PROJECT: Name of project. REPO_PATH: Relative path to the project. REPO_REMOTE: Name of the remote in the manifest.  Usage git repo forall [project-list] -c command  Options Available options:\n -c: Command and arguments for each project to run. -e: If fail once, quit immediately. -p: Show project name before output message. -g \u0026lt;groups\u0026gt;: Filter projects by groups. -r \u0026lt;regexp\u0026gt;: Search project name by regular expression, the matched project will execute the specific command. -i \u0026lt;regexp\u0026gt;: Exclude project name by regular expression, the unmatched project will execute the specific command.  Examples   Execute shell command to show the current working directory on each project.\n $ git repo forall -c 'echo \u0026quot;Project $REPO_PROJECT in `pwd`\u0026quot;' Project git-repo/demo in /Users/jiangxin/work/teambition/git-repo-demo/demo Project git-repo/demo-vendor in /Users/jiangxin/work/teambition/git-repo-demo/demo/vendor Project git-repo/demo-doc in /Users/jiangxin/work/teambition/git-repo-demo/doc    Show the latest git commit message on all projects.\n $ git repo forall -p -- git log -1 --oneline project demo/ 649941d topic1: initial project demo/vendor/ 443693b Initial vendor for project demo project doc/ 32f0be3 Initial doc for demo    ","description":"","id":15,"section":"docs","tags":null,"title":"git repo forall","uri":"http://git-repo.info/en/docs/multi-repos/git-repo-forall/"},{"content":"Description Show a summary of git status on each project. For each file in the project, a two-letter code is used. The first letter stands for changes of index, and the second letter stands for changes of worktree.\nIn the first column, an uppercase letter indicates how the index differs from the last committed state.\n   Letter Meaning Description     - No change Same in HEAD and index   A Added Not in HEAD, in index   M Modified In HEAD, modified in index   D Deleted In HEAD, not in index   R Renamed Not in HEAD, path changed in index   C Copied Not in HEAD, copied from another in index   T Mode changed Same content in HEAD and index, mode changed   U Unmerged Conflict between HEAD and index; resolution required    In the second column, a lowercase letter indicates how the working directory differs from the index.\n   Letter Meaning Description     - New/unknown Not in index, in work tree   m Modified In index, in work tree, modified   d Deleted In index, not in work tree    ","description":"","id":16,"section":"docs","tags":null,"title":"git repo status","uri":"http://git-repo.info/en/docs/multi-repos/git-repo-status/"},{"content":"Description Remove already published local branches. If option --force is given, will delete branch by force, just like git branch -D \u0026lt;branch-name\u0026gt;.\nUsage git-repo abandon [options] [\u0026lt;project\u0026gt;...]  Options Available options:\n --all: Abandon all branches. -b, --branch: Abandon the specific branch. --force: Delete by force, even local branch is not published yet.  ","description":"","id":17,"section":"docs","tags":null,"title":"git repo abandon","uri":"http://git-repo.info/en/docs/multi-repos/git-repo-abandon/"},{"content":"Description Delete all published local branches.\nIt equivalent to git repo abandon --all [\u0026lt;project\u0026gt;...] command. git repo prune does not allow --force option, so it is safer.\nUsage git-repo prune [\u0026lt;project\u0026gt;...]  ","description":"","id":18,"section":"docs","tags":null,"title":"git repo prune","uri":"http://git-repo.info/en/docs/multi-repos/git-repo-prune/"},{"content":"Changelog Changes of git-repo.\n0.7.1 (2020-01-02) New features:\n Add helper for protocol extension, and use can add external helper. Smart selection of remote if repository has many remotes defined. AGit-Flow 2.0: set AGIT_FLOW environment for git connection. AGit-Flow 2.0: support version of ssh_info response. AGit-Flow 2.0: multiple users working on one code review. AGit-Flow 2.0: force push prevention if oldoid is provided.  Refactors, Enhancements and bugfixes:\n Many refactors, such as project.Remote. upload: can upload repo managed by git-worktree path: IsGitDir work with git worktree command version: add compatible issue for version below 2.9.0 upload: fallback to ~/.git-repo/UPLOAD_OPTIONS if no file found  0.6.1 (2019-11-10)  manifest: repo compatible parsing for project revision  0.6.0 (2019-11-08) NOTE: All users are suggested to upgrade to this version. Local changed files\nwill not be overwritten.\n Show project path in log message as prompt init: force create default branch for manifest project sync: do not overwrite local changed files sync: sync -d: always detach even if nothing changed sync: should not make manifest project detached init: no need to set color if color.ui defined in git global/system config by setting app.git.repo.disabled can git-repo for certain workspace init: use git-init command to create repository  0.5.1 (2019-09-09) New features:\n upload: cache different upload options settings for different target branch upload: only show title and description in editor for upload for the 1st time Some commands work for repo in mirror mode  Refactors, Enhancements and bugfixes:\n Disable upx, because some Mac users report errors refactor: rename variables name, such as RepoRoot refactor: Add DotGit, SharedGitDir in repository  0.5.0 (2019-08-20) New features:\n New cmd: git repo abandon New cmd: git repo prune New command: git repo manifest cmd/manifest: freeze manifest revision if provided -r option  Refactors, Enhancements and bugfixes:\n color: add Hilight and Dim methods refactor: do not check Remote type to get reviewable branch repository: get last modified of a revision bugfix: not change Revision during network-half refactor: make WorkRepository as embedding struct for Project go.mod: update goconfig, check cache against file size refactor: rename Path field name of Repository to RepoDir refactor: remove ObjectRepository from project refactor: IsClean only returns one boolean test: add test cases for cmd/manifest test: update test cases for manifest refactor: rename command executable entrance name test: remove pipes, which suppress errors being report  0.4.2 (2019-08-08)  Compress binaries using UPX  0.4.1 (2019-08-07)  peer-review: support \u0026ndash;remote and \u0026ndash;dest option New command: git repo list download: support \u0026ndash;remote option compatibility: Use push options only if git is greater than 2.10.0 compatibility: Show compatible issues of git versions compatibility: Fix compatible issue of Gerrit hook compatibility: Use absolute path for \u0026lsquo;include.path\u0026rsquo; directive README: add badge for CI build status compatibility: Use strings.Replace to be compatible with go 1.11 compatibility: enable GO111MODULE for build and test compatibility: remove test case which depends on higher version of git doc: add godoc download: cherry-pick all commits for one code review  0.3.1 (2019-6-26) Enhancement and bugfix:\n bugfix: add protection for write git extra config file Only set push.default to nothing if it is unset Makefile: build with vendor and new release target Ignore vendor dir filter: ignore errors for smudge debug: add more debug info for repo sync upload: clean published refs for single mode  0.3.0 (2019-6-22) DEPRECATED New Features:\n Add alias command: git download New command: download, for offline code review Add \u0026ndash;no-cache option to ignore ssh_info API cache config: add new filter driver keyword-subst New command: filter, for keyword-subst content filter Install Gerrit hooks if review server is Gerrit Set push.default to nothing if remote is reviewable  Enhancement and bugfix:\n test: change branch name to upper case for test goconfig: fix upper case section name issue refactor LoadRemote for single repository workspace ParseGitURL can parse file:// and other protocol test: add mock options for git-repo sync command test: add test cases for git-repo filter sync: default use 4 jobs test: add test case for git pr \u0026ndash;br  Not quit immediately if cannot get review URL refactor: delay load remote for GitWorkspace Only save config for DisableDefaultPush when necessary Format every multi-log imports by adding alias log Fix some spellings  0.2.1 (2019-6-26) Enhancement and bugfix:\n bugfix: add protection for write git extra config file Makefile: build with vendor and new release target  0.2.0 (2019-6-9) DEPRECATED  \u0026ldquo;git repo \u0026ndash;version\u0026rdquo; follows the same rule as version command test: add test cases for submodule projects refactor: urlJoin should keep spaces unchanged Add build tag for windows build support test: use git peer-review instead of git review When comparing, undefined version is lower than others New alias: git pr, stands for git peer-review version: check if git-repo aliases can be used safely Install ~/.git-repo/config.yml.example file refactor: store extra git config and comments in string  0.1.0 (2019-6-5)  upgrade: show download progress upgrade: add \u0026ndash;no-cert-checks option upgrade: validate package by sha256 sum and gpg signature refactor: viper only bind necessary flags in rootcmd bugfix: continue push if consume yes on dirty worktree  0.0.3 (2019-5-29) New feature:\n New command: git repo upgrade New command: git repo status New command: git-repo forall  Enhancement and bugfix:\n Get project\u0026rsquo;s HEAD from .gitdir inside worktree go.mod: update modules goconfig and multi-log refactor: move executeResult from forall to project sync: not quit if fail to check remote server type sync: return error if work repo is nil when syncing goconfig: fix index out of range bug upload: use knownReviewHosts to help to find review URL upload: show log info if cannot upload a branch upload: one dialog for options and branches edition upload: use more readable upload options message upload: New option \u0026ndash;no-edit Update edit script error message Open an editor for user to custom upload options refactor: parse reviewers later in UploadAndReport method  0.0.2 (2019-5-20)  test: add test case for install hooks Link Gerrit hooks when sync repo from Gerrit Install git-hook templates to ~/.git-repo/hooks LinkManifest failed if cannot find manifest file refactor: use NewEmptyRepoWorkSpace for initial workspace If init from a wrong URL, remove and quit sync: segfault: check if ws.Manifest is nil upload: add debug info for upload command Encode reviewers and cc using encodeString test: fixed review test URL If SSH port is 29418, set remote type to Gerrit Hide standard SSH port for SSHInfo refactor: handle review URL for single git repository Do not add \u0026ndash;receive-pack option for http URL when pushing Check git URL using config.ParseGitURL Not check ssh_info, if review URL is rsync protocol refactor: move git address pattern to config Read ReviewURL from git config remote.origin.review test: mock ssh-info API when calling git-repo sync sync: call ssh_info API and install hooks if remote is Gerrit test: add test cases for git review (upload \u0026ndash;single) Add alias command \u0026lsquo;git review\u0026rsquo;  0.0.1 (2019-5-14)  Initial version  ","description":"","id":19,"section":"","tags":null,"title":"","uri":"http://git-repo.info/en/changelog/"}]