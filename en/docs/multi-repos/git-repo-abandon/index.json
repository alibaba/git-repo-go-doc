[{"content":"Changelog Changes of git-repo.\n0.7.6 (2020-10-13) Improvements:\n Add http proxy support in command git-repo upgrade Fix http proxy support for API call of ssh-info  Bugfix:\n go 1.15 compatible issue: not add rune with int  0.7.5 (2020-09-08) Improvements:\n Support using http proxy when access ssh_info API prune: drop branches without a tracking branch start: not setup tracking branch for immutable rev  Bugfix:\n bugfix: close project.list file before rename Transfer repository from aliyun to alibaba  0.7.4 (2020-03-03) Bugfix:\n To prevent wrong flag for OpenFile, use new file package fix: config example file is not completely overwritten Set proper Revision for manifest project sync: remove unused and unsafe code init: detach manifests project for immutable revision init: when switch manifest branch, use hard reset ssh-info: run ssh_info once for the same hosts  0.7.3.1 (2020-01-13)  Windows: fix wrong URL for repos of a manifest project.  0.7.3 (2020-01-11)  The first release on github.com: github.com/aliyun/git-repo upgrade: download and install tar.gz/zip package README: how to use git-repo upload: confirm all upload tasks if no editor defined editor: search editor from candidates editor: work with editor path with spaces in git-bash upgrade: get program path using os.Executable test: fixed test cases for Linux  0.7.1 (2020-01-02) New features:\n Add helper for protocol extension, and use can add external helper. Smart selection of remote if repository has many remotes defined. AGit-Flow 2.0: set AGIT_FLOW environment for git connection. AGit-Flow 2.0: support version of ssh_info response. AGit-Flow 2.0: multiple users working on one code review. AGit-Flow 2.0: force push prevention if oldoid is provided.  Refactors, Enhancements and bugfixes:\n Many refactors, such as project.Remote. upload: can upload repo managed by git-worktree path: IsGitDir work with git worktree command version: add compatible issue for version below 2.9.0 upload: fallback to ~/.git-repo/UPLOAD_OPTIONS if no file found  0.6.1 (2019-11-10)  manifest: repo compatible parsing for project revision  0.6.0 (2019-11-08) NOTE: All users are suggested to upgrade to this version. Local changed files\nwill not be overwritten.\n Show project path in log message as prompt init: force create default branch for manifest project sync: do not overwrite local changed files sync: sync -d: always detach even if nothing changed sync: should not make manifest project detached init: no need to set color if color.ui defined in git global/system config by setting app.git.repo.disabled can git-repo for certain workspace init: use git-init command to create repository  0.5.1 (2019-09-09) New features:\n upload: cache different upload options settings for different target branch upload: only show title and description in editor for upload for the 1st time Some commands work for repo in mirror mode  Refactors, Enhancements and bugfixes:\n Disable upx, because some Mac users report errors refactor: rename variables name, such as RepoRoot refactor: Add DotGit, SharedGitDir in repository  0.5.0 (2019-08-20) New features:\n New cmd: git repo abandon New cmd: git repo prune New command: git repo manifest cmd/manifest: freeze manifest revision if provided -r option  Refactors, Enhancements and bugfixes:\n color: add Hilight and Dim methods refactor: do not check Remote type to get reviewable branch repository: get last modified of a revision bugfix: not change Revision during network-half refactor: make WorkRepository as embedding struct for Project go.mod: update goconfig, check cache against file size refactor: rename Path field name of Repository to RepoDir refactor: remove ObjectRepository from project refactor: IsClean only returns one boolean test: add test cases for cmd/manifest test: update test cases for manifest refactor: rename command executable entrance name test: remove pipes, which suppress errors being report  0.4.2 (2019-08-08)  Compress binaries using UPX  0.4.1 (2019-08-07)  peer-review: support \u0026ndash;remote and \u0026ndash;dest option New command: git repo list download: support \u0026ndash;remote option compatibility: Use push options only if git is greater than 2.10.0 compatibility: Show compatible issues of git versions compatibility: Fix compatible issue of Gerrit hook compatibility: Use absolute path for \u0026lsquo;include.path\u0026rsquo; directive README: add badge for CI build status compatibility: Use strings.Replace to be compatible with go 1.11 compatibility: enable GO111MODULE for build and test compatibility: remove test case which depends on higher version of git doc: add godoc download: cherry-pick all commits for one code review  0.3.1 (2019-6-26) Enhancement and bugfix:\n bugfix: add protection for write git extra config file Only set push.default to nothing if it is unset Makefile: build with vendor and new release target Ignore vendor dir filter: ignore errors for smudge debug: add more debug info for repo sync upload: clean published refs for single mode  0.3.0 (2019-6-22) DEPRECATED New Features:\n Add alias command: git download New command: download, for offline code review Add \u0026ndash;no-cache option to ignore ssh_info API cache config: add new filter driver keyword-subst New command: filter, for keyword-subst content filter Install Gerrit hooks if review server is Gerrit Set push.default to nothing if remote is reviewable  Enhancement and bugfix:\n test: change branch name to upper case for test goconfig: fix upper case section name issue refactor LoadRemote for single repository workspace ParseGitURL can parse file:// and other protocol test: add mock options for git-repo sync command test: add test cases for git-repo filter sync: default use 4 jobs test: add test case for git pr \u0026ndash;br  Not quit immediately if cannot get review URL refactor: delay load remote for GitWorkspace Only save config for DisableDefaultPush when necessary Format every multi-log imports by adding alias log Fix some spellings  0.2.1 (2019-6-26) Enhancement and bugfix:\n bugfix: add protection for write git extra config file Makefile: build with vendor and new release target  0.2.0 (2019-6-9) DEPRECATED  \u0026ldquo;git repo \u0026ndash;version\u0026rdquo; follows the same rule as version command test: add test cases for submodule projects refactor: urlJoin should keep spaces unchanged Add build tag for windows build support test: use git peer-review instead of git review When comparing, undefined version is lower than others New alias: git pr, stands for git peer-review version: check if git-repo aliases can be used safely Install ~/.git-repo/config.yml.example file refactor: store extra git config and comments in string  0.1.0 (2019-6-5)  upgrade: show download progress upgrade: add \u0026ndash;no-cert-checks option upgrade: validate package by sha256 sum and gpg signature refactor: viper only bind necessary flags in rootcmd bugfix: continue push if consume yes on dirty worktree  0.0.3 (2019-5-29) New feature:\n New command: git repo upgrade New command: git repo status New command: git-repo forall  Enhancement and bugfix:\n Get project\u0026rsquo;s HEAD from .gitdir inside worktree go.mod: update modules goconfig and multi-log refactor: move executeResult from forall to project sync: not quit if fail to check remote server type sync: return error if work repo is nil when syncing goconfig: fix index out of range bug upload: use knownReviewHosts to help to find review URL upload: show log info if cannot upload a branch upload: one dialog for options and branches edition upload: use more readable upload options message upload: New option \u0026ndash;no-edit Update edit script error message Open an editor for user to custom upload options refactor: parse reviewers later in UploadAndReport method  0.0.2 (2019-5-20)  test: add test case for install hooks Link Gerrit hooks when sync repo from Gerrit Install git-hook templates to ~/.git-repo/hooks LinkManifest failed if cannot find manifest file refactor: use NewEmptyRepoWorkSpace for initial workspace If init from a wrong URL, remove and quit sync: segfault: check if ws.Manifest is nil upload: add debug info for upload command Encode reviewers and cc using encodeString test: fixed review test URL If SSH port is 29418, set remote type to Gerrit Hide standard SSH port for SSHInfo refactor: handle review URL for single git repository Do not add \u0026ndash;receive-pack option for http URL when pushing Check git URL using config.ParseGitURL Not check ssh_info, if review URL is rsync protocol refactor: move git address pattern to config Read ReviewURL from git config remote.origin.review test: mock ssh-info API when calling git-repo sync sync: call ssh_info API and install hooks if remote is Gerrit test: add test cases for git review (upload \u0026ndash;single) Add alias command \u0026lsquo;git review\u0026rsquo;  0.0.1 (2019-5-14)  Initial version  ","description":"","id":0,"section":"","tags":null,"title":"Changelog","uri":"/en/changelog/"},{"content":"Quick Start Install git-repo You can download git-repo from: https://github.com/alibaba/git-repo-go/releases.\nChoose the proper package according to your OS (Linux, Mac, or Windows), and architecture (amd or 386), download and extract the package.\nCopy the binary into executable PATH (e.g. /usr/local/bin on Linux or macOS) to complete the installation.\nRun git-repo for the first time Run any subcommand of git-repo, will perform some initialization tasks. e.g.:\n$ git repo version  Working on a single repository Make sure to setup a remote tracking branch correctly using:\n$ git branch -u origin/master  Create code review (pull request) from command line:\n$ git pr  Working on multiple repositories git-repo is compatible with Android repo, and can work on multiple repositories managed by a manifest repository.\n  Create a workspace.\n $ mkdir workspace $ cd workspace    Initialize workspace from a manifest project (repository), which has an XML file (e.g., default.xml) to describe the relationship of the sub-projects.\n $ git repo init -u \u0026lt;manifest repository\u0026gt;    Fetch all sub-projects and checkout to the local workspace.\n $ git repo sync    Create a local branch on all projects for development.\n $ git repo start --all \u0026lt;branch/name\u0026gt;    Working in the workspace and make new commits.\n  Run the following commands to send local commits to remote server to create code reviews (pull requests).\n $ git repo upload    ","description":"","id":1,"section":"docs","tags":null,"title":"Quick start","uri":"/en/docs/getting-started/quickstart/"},{"content":"Dependence Install git 2.10.0 or above before install/running git-repo.\nDownload and Install git-repo   Download the latest release of git-repo from: https://github.com/alibaba/git-repo-go/releases.\nChoose the proper package according to your OS (Linux, Mac, or Windows) and architecture (amd or 386), download and extract the package.\n  Make git-repo executable before install on Linux or macOS:\n $ chmod a+x git-repo    Move git-repo into an executable PATH (e.g., /usr/local/bin for Linux or macOS, C:\\Windows\\system32 for Windows):\n $ sudo mv git-repo /usr/local/bin/    ","description":"","id":2,"section":"docs","tags":null,"title":"Installation","uri":"/en/docs/getting-started/installation/"},{"content":"Execute git-repo for the first time git-repo will perform some initialization tasks on the first execution. See: git config extensions. Running any command will trigger the initialization tasks.\n$ git repo --version  Note: git-repo will be recognized as git subcommand so that we can execute git repo (without a dash).\nManual for git-repo Show help message of git-repo:\n$ git repo -h  or\n$ git repo  Show help message of of subcommands of git-repo, see the following examples:\n$ git repo help init $ git repo help sync  ","description":"","id":3,"section":"docs","tags":null,"title":"Running","uri":"/en/docs/getting-started/running/"},{"content":"Upgrade git-repo Upgrade git-repo to the latest version, using command:\n$ git repo upgrade  Will download and install the latest version of git-repo.\nIf the upgrade process failed because of permissions or other reasons, it would show instruction in the output message. Please follow the instruction for manual upgrade.\n$ git repo upgrade Download git-repo: ############################################################ 100% +--------------------------------------------------------------------------------+ | Fail to upgrade. Please copy | | /var/folders/5d/21v9l2z12j/T/git-repo-0.2.0-619707833 | | to | | /usr/bin/git-repo | | by hands | +--------------------------------------------------------------------------------+ Error: upgrade failed  For this case, run the instruction given by the example, e.g.:\n$ sudo cp /var/folders/5d/21v9l2z12j/T/git-repo-0.2.0-619707833 /usr/bin/git-repo  ","description":"","id":4,"section":"docs","tags":null,"title":"Upgrade","uri":"/en/docs/getting-started/upgrade/"},{"content":"git-repo provides several alias commands for git workflow on a single repository:\n git peer-review or git pr: publish local commits to create code review. git download: download specific code review from remote to the local repository. git abandon: prune already published local branch.  Demo for git workflow on a single repository:\n  Fig: git-repo for a single repository\n  ","description":"","id":5,"section":"docs","tags":null,"title":"Overview","uri":"/en/docs/single-repo/overview/"},{"content":"git-repo provides alias command git peer-review or git pr to create a code review on a single repository.\n1. Create a code review 1.1 Clone Clone remote repository to the local workspace (Ignore this step, if have local repository already):\n$ git clone https://codeup.aliyun.com/git-repo/demo.git $ cd demo  1.2 Create a local topic branch This step is optional. If you want to work on several different tasks at the same local workspace, you must create a topic branch for each task. Otherwise, the code review will be overwritten.\n$ git checkout -b topic1 origin/master  Note:\n Use option -b topic1 to create a specific branch named \u0026ldquo;topic1\u0026rdquo;. New branch will be created from the commit pointed by the last argument origin/master, and the newly created branch will setup to track it.  1.3 Working in the worktree Create new commits in the worktree.\n1.4 Publish local commits to create a new code review Run the following command to publish local commits to remote server to create or update code review (pull request):\n$ git pr  git pr has many options, e.g.:\n  Assign reviewers and watchers. Multiple users can be separated by commas.\n $ git pr --reviewers user1,user2 --cc user3    Create a code review in draft mode. A draft mode code review cannot be merged.\n $ git pr --draft    If nothing changed in the local repository, will show the following error message:\n$ git pr NOTE: no branches ready for upload  If all local commits have already been published, execute another git pr will show the following message:\n$ git pr NOTE: no change in project . (branch topic1) since last upload NOTE: no branches ready for upload  If there is no tracking branch, git pr doesn\u0026rsquo;t know the target branch to create a code review. Will show the following error message:\n$ git pr FATAL: upload failed: cannot find tracking branch Please run command \u0026quot;git branch -u \u0026lt;upstream\u0026gt;\u0026quot; to track a remote branch. E.g.: git branch -u origin/master  You can follow the instruction in the message to setup a remote tracking branch.\n1.5 User interface of \u0026ldquo;git pr\u0026rdquo; When running git pr, will open an editor with the following text:\n############################################################################## # Step 1: Input your options for code review # # Note: Input your options below the comments and keep the comments unchanged ############################################################################## # [Title] : one-line message below as the title of code review # [Description] : multiple lines of text as the description of code review # [Issue] : multiple lines of issue IDs for cross references # [Reviewer] : multiple lines of user names as the reviewers for code review # [Cc] : multiple lines of user names as the watchers for code review # [Draft] : a boolean (yes/no, or true/false) to turn on/off draft mode # [Private] : a boolean (yes/no, or true/false) to turn on/off private mode ############################################################################## # Step 2: Select project and branches for upload # # Note: Uncomment the branches to upload, and not touch the project lines ############################################################################## # # project ./: branch topic1 ( 3 commit(s)) to remote branch master: # 03c01e211122b49fe05f48e08fd3e1dd1c52e57e # ec78989440697fbc13bfbd3ea082fe9b3fc5f2d7 # 4e599aa284ed64ba12ba1b5b06fbbd3199846434  The first section of the text is used for adding options for git pr. Lines begin with the character \u0026ldquo;#\u0026rdquo; are comments. Please do not change these comments, for git pr needs to find parameter names in the comments.\n Below the line started with \u0026ldquo;# [Title]\u0026rdquo;, add one-line title for the code review to be generated. Below the line started with \u0026ldquo;# [Description]\u0026rdquo;, add description for the code review to be generated. Below the line started with \u0026ldquo;# [Issue]\u0026rdquo;, add issue number for reference. Below the line started with \u0026ldquo;# [Reviewer]\u0026rdquo;, add reviewers (one reviewer on each line, or separated by commas). Below the line started with \u0026ldquo;# [Cc]\u0026rdquo;, add watchers. Below the line started with \u0026ldquo;# [Draft]\u0026rdquo;, input \u0026ldquo;yes\u0026rdquo; to turn on draft mode.  The second section lists branches of the current project that are ready to publish. Uncomment the branches you want to publish, and git pr will create code reviews for these branches.\nIf no branch is ready to publish (all branches are commented out), git pr will abort.\nSave the content and quit the editor, git pr will continue to send local commits to remote server to create/update a code review.\n1.6 Result of creating/updating a code review After executing git pr successfully, will show message of creating/updating a code review. The following message is an example of Alibaba code platform:\nremote: +------------------------------------------------------------+ remote: | Merge Request #7937 was created or updated. | remote: | View merge request at URL: | remote: | https://codeup.aliyun.com/git-repo/demo/merge_request/7937 | remote: +------------------------------------------------------------+ To ssh://codeup.aliyun.com/git-repo/demo.git * [new branch] topic1 -\u0026gt; refs/for/master/topic1  NOTE: in the above message, there is a URL to access the generated code review.\n1.7 Special reference of the code review for download A new special reference will be created inside the repository for user to access the generated code review. The special reference is not a branch or tag, and need to be fetched using a special command, e.g.:\n$ git fetch origin refs/merge-requests/7937/head From https://codeup.aliyun.com/git-repo/demo.git * branch refs/merge-requests/7937/head -\u0026gt; FETCH_HEAD  Check out the fetched commit:\n$ git checkout FETCH_HEAD  NOTE: git-repo provides an alias command git download to download the specific code review.\n2. Update a code review If commits of the code review need to be updated, make changes in the local repository, and run the following command to update commits of the code review:\n$ git pr  3. Multi-user collaboration Run git pr on the same repository, with the same local branch, to the same remote branch, by the same user, will update commits of the same code review (pull request), instead of creating a new one.\nIf a different user, such as a reviewer, wants to update the commits of a code review, how can he/she do it?\nFirst, download the commits of the code review. Download pull request #7937 for example:\n$ git download 7937  Then, create a new local branch, such as:\n$ git checkout -b code-review  Make changes in the local repository.\nSend changes of the local repository to the remote server to update the specific pull request using command like:\n$ git pr --change 7937  ","description":"","id":6,"section":"docs","tags":null,"title":"git peer-review","uri":"/en/docs/single-repo/git-peer-review/"},{"content":"Description Download commits of the specific code review, and check out the tip commit by default.\ngit download is an alias command of git-repo.\nUsage git download [options] \u0026lt;Merge-Request-ID\u0026gt; git download [options] \u0026lt;Change-ID\u0026gt;/\u0026lt;Patch-ID\u0026gt;  Note:\n For AGit-Flow and other compatible services, use \u0026lt;Merge-Request-ID\u0026gt; as a argument. For Gerrit service, use \u0026lt;Change-ID\u0026gt;/\u0026lt;Patch-ID\u0026gt; format argument.  Options Available options:\n -c, --cherry-pick: Run cherry-pick after fetching. -f, --ff-only: Run merge --ff-only after fetching. -r, --revert: Revert specific change of Gerrit.  ","description":"","id":7,"section":"docs","tags":null,"title":"git download","uri":"/en/docs/single-repo/git-download/"},{"content":"Description Remove already published local branches. If option --force is given, will delete branch by force, just like git branch -D \u0026lt;branch-name\u0026gt;.\ngit abandon is an alias command of git-repo.\nUsage git abandon [options]  Options Available options:\n --all: Abandon all branches. -b, --branch: Abandon specific branch. --force: Delete by force, even local branch is not published yet.  ","description":"","id":8,"section":"docs","tags":null,"title":"git abandon","uri":"/en/docs/single-repo/git-abandon/"},{"content":"Git built-in solution for multiple repositories is git submodule. It is OK for the release of the source code of all related repositories, but it is bad for development because all sub repositories pin to specific commits.\nAndroid project introduced a better solution for the management of multiple repositories that the relationship of repositories is defined in an XML file in a manifest project. Android also introduced a new command-line tool named repo, which helps manage repositories.\ngit-repo is compatible with Android repo, can also manage multiple repositories. Usage of git-repo:\ngit repo \u0026lt;command\u0026gt; \u0026lt;arguments\u0026gt; ...  See help message, use:\ngit repo help git repo help \u0026lt;command\u0026gt;  The following example is how to manage multiple repositories using git-repo:\n  Fig: git-repo for multiple repositories\n  Main steps in the above example:\n  Create an empty directory as workspace.\n $ mkdir workspace $ cd workspace    Initialize workspace by cloning the manifest repository.\n $ git repo init -u \u0026lt;manifest-url\u0026gt;  Example:\n $ git repo init -u https://codeup.aliyun.com/git-repo/manifests.git    Fetch and check out all related repositories.\n $ git repo sync    Create a topic branch on all projects for development.\n $ git repo start --all \u0026lt;topic-branch\u0026gt;  Example:\n $ git repo start --all jx/topic1    Work in the worktree, and create new commits.\n  Scan new commits in all repositories and publish new commits to create code reviews.\n $ git repo upload    ","description":"","id":9,"section":"docs","tags":null,"title":"Overview","uri":"/en/docs/multi-repos/overview/"},{"content":"Manifest file example In a manifest repository, there are one or more XML files, which define the relationship of all repositories of the project. The default manifest file in the manifest project is default.xml. See the following content of a manifest file as an example:\n\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot;?\u0026gt; \u0026lt;manifest\u0026gt; \u0026lt;remote name=\u0026quot;origin\u0026quot; fetch=\u0026quot;..\u0026quot; revision=\u0026quot;master\u0026quot; review=\u0026quot;https://codeup.aliyun.com\u0026quot; /\u0026gt; \u0026lt;remote name=\u0026quot;github\u0026quot; fetch=\u0026quot;https://github.com\u0026quot; revision=\u0026quot;master\u0026quot; review=\u0026quot;\u0026quot; /\u0026gt; \u0026lt;default remote=\u0026quot;origin\u0026quot; revision=\u0026quot;master\u0026quot; sync-j=\u0026quot;4\u0026quot; /\u0026gt; \u0026lt;project name=\u0026quot;alibaba/git-repo-go\u0026quot; path=\u0026quot;git-repo\u0026quot; groups=\u0026quot;app\u0026quot;\u0026gt; \u0026lt;linkfile src=\u0026quot;README.md\u0026quot; dest=\u0026quot;README.md\u0026quot;\u0026gt;\u0026lt;/linkfile\u0026gt; \u0026lt;/project\u0026gt; \u0026lt;project name=\u0026quot;alibaba/git-repo-go-doc\u0026quot; path=\u0026quot;website\u0026quot; groups=\u0026quot;app\u0026quot;/\u0026gt; \u0026lt;project name=\u0026quot;jiangxin/goconfig\u0026quot; path=\u0026quot;lib/goconfig\u0026quot; groups=\u0026quot;lib\u0026quot; remote=\u0026quot;github\u0026quot; /\u0026gt; \u0026lt;project name=\u0026quot;jiangxin/multi-log\u0026quot; path=\u0026quot;lib/multi-log\u0026quot; groups=\u0026quot;lib\u0026quot; remote=\u0026quot;github\u0026quot; /\u0026gt; \u0026lt;/manifest\u0026gt;  The root element of the manifest XML file is manifest and has many other elements.\nElement remote One or more remote elements may be specified. Each remote element defines a remote server, which has a name, URL prefix, revision, and review URL. Every project should associate with one remote element.\nAttributes of the remote element:\n Attribute name: A short name unique to this manifest file. The name specified here is used as the remote name in each project\u0026rsquo;s .git/config, and is therefore automatically available to commands like git fetch, git remote, git pull, and git push. Attribute alias: The alias, if specified, is used to override name to be set as the remote name in each project\u0026rsquo;s .git/config. Its value can be duplicated while attribute name has to be unique in the manifest file. This helps each project to be able to have same remote name, which actually points to different remote URL. Attribute fetch: The Git URL prefix for all projects which use this remote. Each project\u0026rsquo;s name is appended to this prefix to form the actual URL used to clone the project. If fetch points to a relative path, it will form a real URL prefix from manifest repository URL, which is given by git repo init -u \u0026lt;URL\u0026gt; command line. Attribute revision: Name of a Git branch (e.g., master or refs/heads/master) or revision. Remotes with their own revision will override the default revision. Attribute review: Hostname of the code review server where reviews are uploaded to by git repo upload. This attribute is optional; if not specified, then git repo upload will not function.  Element default At most one default element may be specified. Its remote and revision attributes are used when a project element does not specify its own remote or revision attribute.\nElement project One or more project elements may be specified. Each element describes a single Git repository to be cloned into the client workspace. Project can be nested.\n Attribute name: A unique name of the project. The project\u0026rsquo;s name is appended onto its remote\u0026rsquo;s fetch URL to generate the actual URL to configure the Git remote with. Attribute path: An optional path relative to the top directory of the workspace where the Git working directory for this project should be placed. If not supplied, the project name is used. If the project has a parent element, its path will be prefixed by the parent\u0026rsquo;s. Attribute groups: List of groups to which this project belongs, whitespace or comma separated. All projects belong to the group \u0026ldquo;all\u0026rdquo;, and each project automatically belongs to a group of its \u0026ldquo;name:name\u0026rdquo; and \u0026ldquo;path:path\u0026rdquo;. Attribute remote: Name of a previously defined remote element. If not supplied, the remote given by the default element is used. Attribute revision: Name of the Git branch the manifest wants to track for this project, or revision used for checkout only. If not supplied, the revision given by the remote element is used if applicable, else the default element is used.  References:\n Manifest format of Android repo Android manifest file example  ","description":"","id":10,"section":"docs","tags":null,"title":"Manifest Format","uri":"/en/docs/multi-repos/manifest-format/"},{"content":"Description Initialize the current workspace or re-initialize workspace with different options.\nWill create .repo directory inside workspace while executing git repo init. There are one manifest repository and manifest file .repo/manifest.xml inside.\nSome options of git repo init will save as git configs in the .repo/manifests.git repository, such as -m \u0026lt;name\u0026gt;, -g \u0026lt;groups\u0026gt; options.\nUsage git repo init -u \u0026lt;URL\u0026gt; [options...]  Options Available options:\n -u \u0026lt;URL\u0026gt;: URL of manifest project. -b \u0026lt;branch\u0026gt;: Manifest branch or revision to be checked out (default \u0026ldquo;master\u0026rdquo;). -m \u0026lt;name\u0026gt;: Manifest file name used to initialize workspace (default \u0026ldquo;default.xml\u0026rdquo;). -g \u0026lt;groups\u0026gt;: Restrict manifest projects to ones with specified group(s) [default|all|G1,G2,G3|G4,-G5,-G6] (default \u0026ldquo;default\u0026rdquo;).  ","description":"","id":11,"section":"docs","tags":null,"title":"git repo init","uri":"/en/docs/multi-repos/git-repo-init/"},{"content":"Description Run git fetch and git checkout to downloads new changes and updates the working files in your local workspace. If you run repo sync without arguments, it synchronizes the files for all projects.\nWhen you run repo sync, this is what happens:\n  Update manifest project.\n  Compare with the project list file (if exist) generated by last git repo sync command, and remove obsolete projects (if nothing changed).\n  If the project has never been synchronized, then git repo sync is equivalent to git clone. All branches in the remote repository are copied to the local project directory.\n  If the project has been synchronized before, then git repo sync is equivalent to:\n git remote update git rebase origin/\u0026lt;branch\u0026gt;  The branch is the currently checked-out branch in the local project directory. If the local branch isn\u0026rsquo;t tracking a branch in the remote repository, then no synchronization occurs for the project.\n  If the Git rebase operation results in merge conflicts, please use the standard Git commands (for example, git rebase --continue) to resolve the conflicts.\n  After a successful run of git repo sync, the code in specified projects is up to date and synced with the code in the remote repository.\nUsage git repo sync [options...]  Options Available options:\n -c: Fetch only the current manifest branch from the server. -d: Switch specified projects back to the manifest revision. This is helpful if the project is currently on a topic branch, but the manifest revision is temporarily needed. -f: Proceed with syncing other projects even if a project fails to sync. -j \u0026lt;num\u0026gt;: Split the sync across threads for faster completion. Make sure not to overwhelm your machine by leaving some CPU reserved for other tasks. To see the number of available CPUs, first run: nproc \u0026ndash;all -q: Run quietly by suppressing status messages. -n：Only run network part, i.e., only run git fetch, do not run git checkout. -l：Only run local part, i.e., only run git checkout, and do not run git fetch.  ","description":"","id":12,"section":"docs","tags":null,"title":"git repo sync","uri":"/en/docs/multi-repos/git-repo-sync/"},{"content":"Description Begin a new branch for development, starting from the revision specified in the manifest.\nUsage Create a new branch for specific projects.\ngit repo start \u0026lt;branch-name\u0026gt; [project...]  Create a new branch for all projects.\ngit repo start --all \u0026lt;branch-name\u0026gt;  ","description":"","id":13,"section":"docs","tags":null,"title":"git repo start","uri":"/en/docs/multi-repos/git-repo-start/"},{"content":"Description Send changes to remote server to create code reviews.\nFor the specified projects, compares the local branches to the remote branches updated during the last git repo sync. git-repo prompts you to select one or more of the branches that haven\u0026rsquo;t been uploaded for review.\ngit repo upload command will start an editor for you with the following text as an example. Add custom options and choose the branches that need to be uploaded in the editor.\n############################################################################## # Step 1: Input your options for code review # # Note: Input your options below the comments and keep the comments unchanged ############################################################################## # [Title] : one-line message below as the title of code review # [Description] : multiple lines of text as the description of code review # [Issue] : multiple lines of issue IDs for cross references # [Reviewer] : multiple lines of user names as the reviewers for code review # [Cc] : multiple lines of user names as the watchers for code review # [Draft] : a boolean (yes/no, or true/false) to turn on/off draft mode # [Private] : a boolean (yes/no, or true/false) to turn on/off private mode ############################################################################## # Step 2: Select project and branches for upload # # Note: Uncomment the branches to upload, and not touch the project lines ############################################################################## # # project foo: # branch topic1 ( 3 commit(s)) to remote branch master: # 03c01e211122b49fe05f48e08fd3e1dd1c52e57e # ec78989440697fbc13bfbd3ea082fe9b3fc5f2d7 # 4e599aa284ed64ba12ba1b5b06fbbd3199846434 # # project bar: # branch topic1 ( 2 commit(s)) to remote branch master: # 47a3cae46019893db78a19906dda97825279f288 # ced1a1d6e16bc3f8051f87621eb69ba2a7e10672  The first section of the text is used for adding options for git repo upload. Lines begin with the character \u0026ldquo;#\u0026rdquo; are comments. Please do not change these comments, for git-repo needs to find parameter names in the comments.\n Below the line started with \u0026ldquo;# [Title]\u0026rdquo;, add one-line title for the code review to be generated. Below the line started with \u0026ldquo;# [Description]\u0026rdquo;, add description for the code review to be generated. Below the line started with \u0026ldquo;# [Issue]\u0026rdquo;, add issue number for reference. Below the line started with \u0026ldquo;# [Reviewer]\u0026rdquo;, add reviewers (one reviewer on each line, or separated by commas). Below the line started with \u0026ldquo;# [Cc]\u0026rdquo;, add watchers. Below the line started with \u0026ldquo;# [Draft]\u0026rdquo;, input \u0026ldquo;yes\u0026rdquo; to turn on draft mode.  The second section lists projects and branches that are ready to publish. Uncomment the branches you want to publish. git-repo will create code reviews for these publish branches.\nIf no branch is ready to publish (all branches are commented out), git repo upload will abort.\nSave the content and quit the editor, git-repo will continue to send local commits to remote repositories to create/update code reviews.\nFor example: in the following text, the leading character \u0026ldquo;#\u0026rdquo; at the beginning of the line of branch topic1 of project foo has been deleted, while other comment letter \u0026ldquo;#\u0026rdquo; are preserved:\n############################################################################## # Step 2: Select project and branches for upload # # Note: Uncomment the branches to upload, and not touch the project lines ############################################################################## # # project foo: branch topic1 ( 3 commit(s)) to remote branch master: # 03c01e211122b49fe05f48e08fd3e1dd1c52e57e # ec78989440697fbc13bfbd3ea082fe9b3fc5f2d7 # 4e599aa284ed64ba12ba1b5b06fbbd3199846434 # # project bar: # branch topic1 ( 2 commit(s)) to remote branch master: # 47a3cae46019893db78a19906dda97825279f288 # ced1a1d6e16bc3f8051f87621eb69ba2a7e10672  Save and quit the editor, git repo upload will only send changes of project foo, and create code review for it.\nUsage git repo upload [options...] [project...]  Options Available options:\n --cbr: Upload current git branch. --br \u0026lt;branch-name\u0026gt;: Upload specific branch. --re \u0026lt;user1,user2,...\u0026gt;: Request reviews from these people. --cc \u0026lt;user1,user2,...\u0026gt;: Also send email to these watchers. --title \u0026lt;title\u0026gt;: Set title for code review. --description \u0026lt;description\u0026gt;: Set description for code review.  ","description":"","id":14,"section":"docs","tags":null,"title":"git repo upload","uri":"/en/docs/multi-repos/git-repo-upload/"},{"content":"Description Download commits of the specific code review, and check out the tip commit by default.\nUsage git repo download [options] \u0026lt;project\u0026gt; \u0026lt;Merge-Request-ID\u0026gt; ... git repo download [options] \u0026lt;project\u0026gt; \u0026lt;Change-ID\u0026gt;/\u0026lt;Patch-ID\u0026gt; ...  Note:\n For AGit-Flow and other compatible services, use \u0026lt;Merge-Request-ID\u0026gt; as a argument. For Gerrit service, use \u0026lt;Change-ID\u0026gt;/\u0026lt;Patch-ID\u0026gt; format argument.  Options Available options:\n -c, --cherry-pick: Run cherry-pick after fetching. -f, --ff-only: Run merge --ff-only after fetching. -r, --revert: Revert specific change of Gerrit.  ","description":"","id":15,"section":"docs","tags":null,"title":"git repo download","uri":"/en/docs/multi-repos/git-repo-download/"},{"content":"Description This command provides an iterator, run a specific shell command on each project.\nThe following environments can be used in a shell command:\n REPO_PROJECT: Name of project. REPO_PATH: Relative path to the project. REPO_REMOTE: Name of the remote in the manifest.  Usage git repo forall [project-list] -c command  Options Available options:\n -c: Command and arguments for each project to run. -e: If fail once, quit immediately. -p: Show project name before output message. -g \u0026lt;groups\u0026gt;: Filter projects by groups. -r \u0026lt;regexp\u0026gt;: Search project name by regular expression, the matched project will execute the specific command. -i \u0026lt;regexp\u0026gt;: Exclude project name by regular expression, the unmatched project will execute the specific command.  Examples   Execute shell command to show the current working directory on each project.\n $ git repo forall -c 'echo \u0026quot;Project $REPO_PROJECT in `pwd`\u0026quot;' Project git-repo/demo in /Users/jiangxin/work/aliyun/git-repo-demo/demo Project git-repo/demo-vendor in /Users/jiangxin/work/aliyun/git-repo-demo/demo/vendor Project git-repo/demo-doc in /Users/jiangxin/work/aliyun/git-repo-demo/doc    Show the latest git commit message on all projects.\n $ git repo forall -p -- git log -1 --oneline project demo/ 649941d topic1: initial project demo/vendor/ 443693b Initial vendor for project demo project doc/ 32f0be3 Initial doc for demo    ","description":"","id":16,"section":"docs","tags":null,"title":"git repo forall","uri":"/en/docs/multi-repos/git-repo-forall/"},{"content":"Description Show a summary of git status on each project. For each file in the project, a two-letter code is used. The first letter stands for changes of index, and the second letter stands for changes of worktree.\nIn the first column, an uppercase letter indicates how the index differs from the last committed state.\n   Letter Meaning Description     - No change Same in HEAD and index   A Added Not in HEAD, in index   M Modified In HEAD, modified in index   D Deleted In HEAD, not in index   R Renamed Not in HEAD, path changed in index   C Copied Not in HEAD, copied from another in index   T Mode changed Same content in HEAD and index, mode changed   U Unmerged Conflict between HEAD and index; resolution required    In the second column, a lowercase letter indicates how the working directory differs from the index.\n   Letter Meaning Description     - New/unknown Not in index, in work tree   m Modified In index, in work tree, modified   d Deleted In index, not in work tree    ","description":"","id":17,"section":"docs","tags":null,"title":"git repo status","uri":"/en/docs/multi-repos/git-repo-status/"},{"content":"Description Remove already published local branches. If option --force is given, will delete branch by force, just like git branch -D \u0026lt;branch-name\u0026gt;.\nUsage git-repo abandon [options] [\u0026lt;project\u0026gt;...]  Options Available options:\n --all: Abandon all branches. -b, --branch: Abandon the specific branch. --force: Delete by force, even local branch is not published yet.  ","description":"","id":18,"section":"docs","tags":null,"title":"git repo abandon","uri":"/en/docs/multi-repos/git-repo-abandon/"},{"content":"Description Delete all published local branches.\nIt equivalent to git repo abandon --all [\u0026lt;project\u0026gt;...] command. git repo prune does not allow --force option, so it is safer.\nUsage git-repo prune [\u0026lt;project\u0026gt;...]  ","description":"","id":19,"section":"docs","tags":null,"title":"git repo prune","uri":"/en/docs/multi-repos/git-repo-prune/"},{"content":"About myself Due to the coronavirus outbreak in China, I was unable to attend the Git Merge 2020 conference to give a speech on \u0026ldquo;AGit and git-repo\u0026rdquo; in Los Angeles on March 4, 2020. It\u0026rsquo;s a pity that I can\u0026rsquo;t communicate face to face with developers all over the world this time. I will share the content of my speech on this blog.\nA brief introduction to myself:\n  I am Jiang Xin, a software engineer in Alibaba, China.\n  You might be familiar with the feature I contributed to Git: interactive git clean, and I recommend you to use git clean -i instead of git clean -n/-f.\n  I am also the Git l10n coordinator helping 14 localization teams to improve multilingual for Git.\n  I wrote a book on Git in Chinese and sent copies to Junio and Linus 10 years ago.\n  The secret of Git\u0026rsquo;s success Git is the best choice of SCM and becomes the infrastructure for many popular source code management platforms. What is the secret behind Git\u0026rsquo;s success?\nLinus, the founder of Git and Linux, revealed the secret of Git\u0026rsquo;s success in an interview on Git\u0026rsquo;s 10th anniversary:\n The big thing about distributed source control is that it makes one of the main issues with SCM’s go away – the politics around “who can make changes.”\n The keyword in the above statement is \u0026ldquo;politics\u0026rdquo;. When using traditional SCM, administrators could only add write permissions to core members, so that lots of potential contributors could not make contributions to the project freely, and that\u0026rsquo;s not good for open-source software.\nThe distributed nature of Git makes it possible for a project to have a more flexible workflow. Not only core members but also read-only users can contribute to the project in a more elegant way. For example, GitHub invented a \u0026ldquo;Fork + Pull Request\u0026rdquo; development model, which is the most classic and widely-used workflow so far. Instead of pushing the commits directly to a branch of the remote repository, a contributor can push his/her commits to his/her own forked fully-controlled repository and create a code review (Pull Request) later via the web interface.\nThe two most commonly-used Git workflow There are two popular Git workflows that are introduced by GitHub and Gerrit. The two workflows have these common features:\n  A simpler authorization model for repositories. Do not need to add write permissions to developers one by one; All read-only users can make contributions to repositories.\n  High code quality because of code review. Contributors create code reviews instead of push commits to branch directly.\n  A simpler branch model. Do not need to create a feature branch as a temporary place to create a code review.\n    Fig: Comparisons of GitHub and Gerrit\n  Differences between these two workflows:\n  Different models for code review.\nCode review in GitHub is called \u0026ldquo;pull request\u0026rdquo;, and each feature has a pull request.\nCode review in Gerrit is called \u0026ldquo;change\u0026rdquo;, and each commit generates a change.\n  Different types of workflow.\nThe workflow of GitHub is a distributed workflow. Contributors work in their own repositories.\nThe workflow of Gerrit is a centralized workflow. All users work in the same repository.\n  Different technical details.\nGitHub workflow is \u0026ldquo;fork + pull request\u0026rdquo;, and its backend is CGit.\nGerrit users should install a special hook \u0026ldquo;commit-msg\u0026rdquo; inside their local repositories so that every commit generated in local repositories has a unique \u0026ldquo;Change-Id\u0026rdquo;. Gerrit uses JGit as its backend.\n  Pros:\nGitHub users use standard git command, so GitHub is easy to get going. Users have full control of their forked repositories. GitHub is the largest open-source community with lots of projects, and one project can be shared to others.\nGerrit repositories are manageable for administrators. Android has a better solution for multi-repositories management than git-submodule.\n  Cons:\nGitHub workflow is too heavy for one-time contribution and is hard to use with a multi-repository project like Android.\nGerrit is managed by one or more administrators, and a user cannot create their own repositories freely. So, one Gerrit server always hosts repositories for one project or one team. It is hard for Gerrit to form a software community.\n  AGit-Flow Usage What is AGit-Flow? Can we combine these two Git workflows to create a new one with all their advantages? (not like GerritHub)\nInspired by Gerrit workflow, we created a centralized git workflow based on CGit (instead of JGit) with a minor changed git-core and several APIs. We call the workflow as “AGit-Flow”, and implemented it in Alibaba\u0026rsquo;s internal source code platform. With the help of \u0026ldquo;AGit-Flow\u0026rdquo;, it\u0026rsquo;s unnecessary to fork a repository or create many feature branches inside a repository. Users can use git push command to create code review (pull request) directly.\n  Fig: AGit-Flow relationship with GitHub and Gerrit\n  In Alibaba, we like pull requests, we like to create or update code reviews directly from the command line, and we like CGit. We don\u0026rsquo;t like the commit-msg hook to mangle our commits, and we are not willing to have multiple code platforms (each of which hosts part of our repositories).\nWe developed a command-line tool named \u0026ldquo;git-repo\u0026rdquo;, so we do not need to type long and complicated git push command. \u0026ldquo;git-repo\u0026rdquo; can be used for Gerrit, AGit-Flow and AGit-Flow alike workflows.\nWork with AGit-Flow See the following graph for a typical AGit-Flow workflow for a single repository:\n  Fig: AGit-Flow diagram for single repository\n  In the above graph, there are two roles. One is a developer, and the other is a committer.\nThe developer creates and updates a pull request with the following steps.\n  Clone the remote repository to local.\n  Work in the local worktree, and create a new commit.\n  Run git pr command in local worktree to push the local commit to the remote server.\n  Create a new pull request on the server side. (e.g., pull request #123).\n  After receiving comments from reviewers, the developer makes a change in the worktree and creates a new commit.\n  Run git pr command for a second time, which will push the new commit to the remote server.\n  The remote server finds that the same user pushes commits to the same target branch with the same session (local branch), and will update an existing pull request, instead of creating a new one.\n  The committer can write comments for the pull request; what\u0026rsquo;s more, the committer can update the pull request with a new commit.\n The committer runs command git download 123 to download pull request #123 to the local repository.\n  The committer makes modifications and creates a new commit in worktree. Then, run command git pr --change 123 to send local commit to the remote server.\n  The remote server detects this special git push command and will update the existing pull request which created by the developer.\n  The committer (or administrator) merge the pull request to the target branch.\n  The following demo is AGit-Flow on a single repository of Alibaba code platform:\n  Fig: Demo of AGit-Flow on a single repository\n  AGit-Flow Implementation A special git push command is used to trigger AGit-Flow workflow. This special command has a special refspec, e.g.:\n$ git push origin HEAD:refs/for/\u0026lt;target-branch\u0026gt;/\u0026lt;session\u0026gt;    The target reference name of the special refspec has a prefix \u0026ldquo;refs/for/\u0026rdquo;. Next to the prefix is \u0026ldquo;\u0026lt;target-branch\u0026gt;\u0026rdquo;, which points to a corresponding branch in the remote repository. The last part in the special refspec is \u0026ldquo;\u0026lt;session\u0026gt;\u0026rdquo;, and we always use name of the local branch as \u0026ldquo;\u0026lt;session\u0026gt;\u0026rdquo;. If the second git push command has the same target branch, the same session and from the same user, will update the already existed pull request generated by the first command instead of creating a new one.\n  There are other special prefixes for AGit-Flow, such as \u0026ldquo;refs/drafts/\u0026rdquo;, and \u0026ldquo;refs/for-review/\u0026rdquo;.\nThe prefix \u0026ldquo;refs/drafts/\u0026rdquo; has the same format and usage as the prefix \u0026ldquo;refs/for/\u0026rdquo;, but will create a pull request in draft mode. A draft mode pull request cannot be merged.\nThe prefix \u0026ldquo;refs/for-review/\u0026rdquo; follows a pull request ID and can be used to update specific pull request which may be generated by others.\n  Below is a diagram of modules of the AGit-Flow server:\n  Fig: modules of AGit-Flow server\n  Front-end authentication The git push command first reaches the front-end module of the server. The front-end module will check user permissions, and only allow a user with write permission to push.\nAs we said in the beginning, a \u0026ldquo;politically correct\u0026rdquo; Git workflow should allow read-only users to \u0026ldquo;write\u0026rdquo; to the repository. So how can we make a proper authorization system for the front-end to allow a user with write permissions to run normal git push (updating heads or tags), and to allow a user with read-only permissions to run special git push command of AGit-Flow?\nThe solution is a special environment variable or HTTP header sent to the server like follows.\n  Fig: Front-end authentication for AGit-Flow\n  The client sends a special environment for SSH protocol or adds a special HTTP header for the special git push command to the server.\n  For the HTTP protocol, the git push command from the client side has a special option -c http.extraHeader=AGIT-FLOW: \u0026lt;agent-version\u0026gt;, which will add a special HTTP header in the request to the HTTP front-end.\n  For the SSH protocol, the client side will use a special SSH command defined by the \u0026ldquo;GIT_SSH_COMMAND\u0026rdquo; environment, and the special SSH command with the option -o SendEnv=AGIT_FLOW will send a special environment to the SSH front-end.\n  When the front-end finds a special environment (SSH protocol) or a special HTTP header (HTTP protocol), it will use a loose authorization rule (only checking for read-only permissions).\n  Warning: Please check write permission for the repository in the \u0026ldquo;pre-receive\u0026rdquo; hook to prevent a read-only user with a forged environment.\n  Patched git-core and proc-receive hook Next, requests from the client side will be delivered to the \u0026ldquo;git-receive-pack\u0026rdquo; process.\n  Fig: Original git-receive-pack diagram\n  The original \u0026ldquo;git-receive-pack\u0026rdquo; process works like the follows:\n  Requests of the client (commands and packfile) are sent one after another to the \u0026ldquo;git-receive-pack\u0026rdquo; process.\n  Packfile is saved (packed or unpacked) into a temporary directory for quarantine. Commands will be sent to the \u0026ldquo;pre-receive\u0026rdquo; hook after parsed.\n  If the \u0026ldquo;pre-receive\u0026rdquo; hook failed to execute, the quarantine directory will be deleted, and quit.\n  Move files in quarantine directory to objects directory.\n  Pass commands to the internal \u0026ldquo;execute_commands\u0026rdquo; function, execute commands (create, update, or delete references).\n  Run the \u0026ldquo;post-receive\u0026rdquo; hook at last for notifications.\n  We have contributed our patched \u0026ldquo;git-receive-pack\u0026rdquo; for AGit-Flow to the Git community, See:\n https://public-inbox.org/git/20200304113312.34229-1-zhiyou.jx@alibaba-inc.com/  The following diagram is our patched \u0026ldquo;git-receive-pack\u0026rdquo; for AGit-Flow:\n  Fig: Patched git-receive-pack for AGit-Flow\n  The changes we made for \u0026ldquo;git-receive-pack\u0026rdquo; to support AGit-Flow are:\n  Add a filter for commands sent from users to \u0026ldquo;git-receive-pack\u0026rdquo;.\n  The filter helps to divide commands into two groups. One group of commands performs the original process, and the other group of commands does not execute the internal execute_commands function, but executes an external \u0026ldquo;proc-receive\u0026rdquo; hook instead.\n  Send an extended status report from \u0026ldquo;receive-pack\u0026rdquo; to cliend-side (\u0026ldquo;send-pack\u0026rdquo;).\n  See the following sections.\nGit config variable: receive.procReceiveRefs   Push requests (commands) are sent to the server (git-receive-pack）one by one through its standard input. Each command has the following format:\n\u0026lt;old-oid\u0026gt; \u0026lt;new-oid\u0026gt; \u0026lt;reference\u0026gt;  Reference names of commands of AGit-Flow style git push have different prefixes other than \u0026ldquo;refs/heads/\u0026rdquo; and \u0026ldquo;refs/tags/\u0026rdquo;. We introduced a new git config variable \u0026ldquo;receive.procReceiveRefs\u0026rdquo; for Git to recognize the special commands for AGit-Flow. For example, we use the following settings for Alibaba code platform:\ngit config --system --add receive.procReceiveRefs refs/for git config --system --add receive.procReceiveRefs refs/drafts git config --system --add receive.procReceiveRefs refs/for-review  The above git commands add three values for config variable \u0026ldquo;receive.procReceiveRefs\u0026rdquo;. Commands from clients matched either value of this config variable will be marked with a particular tag to be handled differently later.\nNew proc-receive Hook The commands marked with the particular tag will not be sent to the internal execute_commands function. They will be executed by a new external hook: \u0026ldquo;proc-receive\u0026rdquo;.\nThis hook executes once for the receive operation. It takes no arguments, but uses a pkt-line format protocol to communicate with \u0026ldquo;receive-pack\u0026rdquo; to read commands, push-options and send results.\n    Version negotiation between \u0026ldquo;receive-pack\u0026rdquo; and \u0026ldquo;proc-receive\u0026rdquo;.\nFirst, \u0026ldquo;receive-pack\u0026rdquo; sends the protocol version and capabilities to the \u0026ldquo;proc-receive\u0026rdquo; hook. The hook will send back the version it supports. Currently supported capablilities include: push options, atoms, etc.\n  Send commands and push-options from \u0026ldquo;receive-pack\u0026rdquo; to the \u0026ldquo;proc-receive\u0026rdquo; hook.\nEach command will be sent from \u0026ldquo;receive-pack\u0026rdquo; to \u0026ldquo;proc-receive\u0026rdquo; in one pkt-line of the format:\n \u0026lt;old-oid\u0026gt; \u0026lt;new-oid\u0026gt; \u0026lt;reference\u0026gt;  Commands will end with a flush-pkt.\nOnly when both \u0026ldquo;receive-pack\u0026rdquo; and \u0026ldquo;proc-receive\u0026rdquo; support \u0026ldquo;push-options\u0026rdquo;，\u0026ldquo;receive-pack\u0026rdquo; will send push-options to \u0026ldquo;proc-receive\u0026rdquo;.\n  The \u0026ldquo;proc-receive\u0026rdquo; hook will call an external API to execute the commands. In Alibaba, this API is used to create or update a pull request.\n  The \u0026ldquo;proc-receive\u0026rdquo; hook sends status report to \u0026ldquo;receive-pack\u0026rdquo;. The following formats of report are supported.\n  ok \u0026lt;ref\u0026gt;\nSuccessfully create or update \u0026lt;ref\u0026gt;.\n  ng \u0026lt;ref\u0026gt; \u0026lt;reason\u0026gt;\nFail to update \u0026lt;ref\u0026gt;, and the error message is given by \u0026lt;reason\u0026gt;.\n  alt \u0026lt;ref\u0026gt; [\u0026lt;alt-ref\u0026gt;] [old-oid=\u0026lt;oid\u0026gt;] [new-oid=\u0026lt;oid\u0026gt;] [forced-update]\nExpect to update \u0026lt;ref\u0026gt;, but update an alternamte reference (\u0026lt;alt-ref\u0026gt;). old-oid、new-oid and other attributes can be given by optional key-value pairs.\n  ft \u0026lt;ref\u0026gt;\nFall through, let \u0026lsquo;receive-pack\u0026rsquo; to execute it.\n    Extended status report for client-side (\u0026ldquo;send-pack\u0026rdquo;) The \u0026ldquo;proc-receive\u0026rdquo; hook may receive a command for a pseudo-reference with a zero-old as its old-oid, while the result of the hook may point to an alternate reference and the reference may exist already with a non-zero old-oid. We extended the format of report from \u0026ldquo;receive-pack\u0026rdquo; to client-side (\u0026ldquo;send-pack\u0026rdquo;), so git client can report correctly.\n  For example, the following git-push command has a pseudo-reference in its refspec:\n$ git push origin HEAD:refs/for/master/topic  New version of Git can report the actual reference updated:\nTo \u0026lt;URL/of/upstream.git\u0026gt; + 263ea37...e5a9ada HEAD -\u0026gt; refs/pull/123/head (forced update)  Public API: ssh-info Gerrit HTTP service provides a ssh_info API, which returns the IP address and port of the SSH server. Android repo will use this API to connect the remote server using SSH passwordless authentication.\nAGit-Flow makes an extension for this ssh_info API. The return value of the API is not plain text anymore but is a JSON including protocol type (such as \u0026ldquo;agit\u0026rdquo;) and protocol version. And the extended ssh_info is not an abbreviation of \u0026ldquo;Secure Shell information\u0026rdquo;, but is the abbreviation of \u0026ldquo;Smart Submit Handler information\u0026rdquo;. This API can be provided not only from the HTTP service but also from the SSH service.\nTo see different ssh_info API results and various corresponding git push commands, see the following chart.\n  Fig: ssh_info - the Smart Submit Handler information API\n  git-repo git-repo is a command-line tool for centralized workflow, can work with Gerrit, AGit-Flow compatible servers. It is written in Golang, and it can be installed easily without further dependency. It provides an easy-to-use solution for multiple repositories which is introduced by Android repo first, and it can also work with a single repository.\ngit-repo is an open-source software on GitHub.\n Source code: https://github.com/alibaba/git-repo-go Website: https://git-repo.info  Installation   Download the latest release of \u0026ldquo;git-repo\u0026rdquo; from https://github.com/alibaba/git-repo-go/releases.\nChoose the proper package according to your OS (Linux, Mac, or Windows) and architecture (AMD or 386), download and extract the package.\n  Make \u0026ldquo;git-repo\u0026rdquo; executable before install on Linux or macOS:\n $ chmod a+x git-repo    Move \u0026ldquo;git-repo\u0026rdquo; into an executable PATH (e.g., /usr/local/bin for Linux or macOS, C:\\Windows\\system32 for Windows):\n $ sudo mv git-repo /usr/local/bin/    Execute git-repo for the first time git-repo will perform some initialization tasks on the first execution. See: git config extensions. Running any command will trigger the initialization tasks.\n$ git repo --version  Note: git-repo will be recognized as git subcommand so that we can execute git repo (without a dash).\nThe following alias commands are installed by the initialization tasks:\n  Fig: Alias commands of git-repo\n  Show help message of git-repo:\n$ git repo -h  Show help message of subcommands of git-repo, see the following examples:\n$ git repo help init $ git repo help sync  Working on a single repository git-repo provides several alias commands for git workflow on a single repository:\n git peer-review or git pr: publish local commits to create a code review. git download: download a code review from remote to the local repository. git abandon: prune already published local branch.  Demo for git workflow on a single repository:\n  Fig: Demo of git pr\n  Working on multiple repositories Git built-in solution for multiple repositories is git-submodule. It is OK for the release of the source code of all related repositories, but it is bad for development because all sub repositories pin to specific commits.\nAndroid project introduced a better solution for the management of multiple repositories that the relationship of repositories is defined in an XML file in a manifest project. Android also introduced a new command-line tool named repo, which helps manage repositories.\ngit-repo is compatible with Android repo and can work on multiple repositories managed by a manifest repository.\n  Create a workspace.\n $ mkdir workspace $ cd workspace    Initialize workspace from a manifest project (repository), which has an XML file (e.g., default.xml) to describe the relationship of the sub-projects.\n $ git repo init -u \u0026lt;manifest repository\u0026gt;    Fetch all sub-projects and checkout to the local workspace.\n $ git repo sync    Create a local branch on all projects for development.\n $ git repo start --all \u0026lt;branch/name\u0026gt;    Working in the workspace and make new commits.\n  Run the following commands to send local commits to the remote server to create code reviews (pull requests).\n $ git repo upload    The following example is how to manage multiple repositories using git-repo:\n  Fig: Demo of git-repo for multiple repositories\n  git-repo is extensible git-repo is extensible, can work with Gerrit, AGit-Flow, and other compatible protocols.\nYou can add new protocol support in git-repo by:\n  Method 1: Add a new protocol helper, which implements the ProtoHelper interface in the helper directory of git-repo.\n  Method 2: Add an external program, which should support --upload、--download parameters, as the helper for your protocol.\n    Fig: git-repo protocol extension\n  Summary AGit-Flow is a centralized git workflow inspired by Gerrit, but with CGit, and use pull requests for code review.\ngit-repo is a client for AGit-Flow, developed using Golang, and is compatible with Android repo.\nOpen source on GitHub:\n  https://github.com/alibaba/git-repo-go (Give me a ⭐️)\n  https://github.com/alibaba/git-repo-go-doc (For website https://git-repo.info)\n  https://public-inbox.org/git/20200304113312.34229-1-zhiyou.jx@alibaba-inc.com/ (Patches on git-receive-pack for AGit-Flow)\n  Implement your own \u0026ldquo;AGit-Flow\u0026rdquo;:\n  Assign a name for your AGit-Flow compatible protocol. (github-flow?)\n  Make your front-end ready for read-only users to push.\n  Install patched git-core in your server and set the special config variable to turn on the feature.\n  Write your own \u0026ldquo;proc-receive\u0026rdquo; hook and internal code review API.\n  Add a public ssh_info API, which returns a JSON response for service detection.\n  Add a new helper to git-repo to support your public Git service.\n  Edit:\n 2020/4/27: Hook is renamed from \u0026ldquo;execute-commands\u0026rdquo; to \u0026ldquo;proc-receive\u0026rdquo;. 2020/4/27: Use a pkt-line format protocol between \u0026ldquo;receive-pack\u0026rdquo; and \u0026ldquo;proc-receive\u0026rdquo;.  ","description":"","id":20,"section":"posts","tags":null,"title":"Agit-Flow and git-repo","uri":"/en/2020/03/agit-flow-and-git-repo/"}]