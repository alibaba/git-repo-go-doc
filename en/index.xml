<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on git-repo</title>
    <link>http://git-repo.info/en/</link>
    <description>Recent content in Home on git-repo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy;{year}, All Rights Reserved</copyright>
    <lastBuildDate>Wed, 04 Mar 2020 08:00:00 +0800</lastBuildDate>
    
        <atom:link href="http://git-repo.info/en/index.xml" rel="self" type="application/rss+xml" />
    
    
    
      
      <item>
        <title>Quick start</title>
        <link>http://git-repo.info/en/docs/getting-started/quickstart/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://git-repo.info/en/docs/getting-started/quickstart/</guid>
        <description>Quick Start Install git-repo You can download git-repo from: https://github.com/alibaba/git-repo-go/releases.
Choose the proper package according to your OS (Linux, Mac, or Windows), and architecture (amd or 386), download and extract the package.
Copy the binary into executable PATH (e.g. /usr/local/bin on Linux or macOS) to complete the installation.
Run git-repo for the first time Run any subcommand of git-repo, will perform some initialization tasks. e.g.:
$ git repo version  Working on a single repository Make sure to setup a remote tracking branch correctly using:</description>
      </item>
      
      <item>
        <title>Installation</title>
        <link>http://git-repo.info/en/docs/getting-started/installation/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://git-repo.info/en/docs/getting-started/installation/</guid>
        <description>Dependence Install git 2.10.0 or above before install/running git-repo.
Download and Install git-repo   Download the latest release of git-repo from: https://github.com/alibaba/git-repo-go/releases.
Choose the proper package according to your OS (Linux, Mac, or Windows) and architecture (amd or 386), download and extract the package.
  Make git-repo executable before install on Linux or macOS:
 $ chmod a+x git-repo    Move git-repo into an executable PATH (e.</description>
      </item>
      
      <item>
        <title>Running</title>
        <link>http://git-repo.info/en/docs/getting-started/running/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://git-repo.info/en/docs/getting-started/running/</guid>
        <description>Execute git-repo for the first time git-repo will perform some initialization tasks on the first execution. See: git config extensions. Running any command will trigger the initialization tasks.
$ git repo --version  Note: git-repo will be recognized as git subcommand so that we can execute git repo (without a dash).
Manual for git-repo Show help message of git-repo:
$ git repo -h  or
$ git repo  Show help message of of subcommands of git-repo, see the following examples:</description>
      </item>
      
      <item>
        <title>Upgrade</title>
        <link>http://git-repo.info/en/docs/getting-started/upgrade/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://git-repo.info/en/docs/getting-started/upgrade/</guid>
        <description>Upgrade git-repo Upgrade git-repo to the latest version, using command:
$ git repo upgrade  Will download and install the latest version of git-repo.
If the upgrade process failed because of permissions or other reasons, it would show instruction in the output message. Please follow the instruction for manual upgrade.
$ git repo upgrade Download git-repo: ############################################################ 100% +--------------------------------------------------------------------------------+ | Fail to upgrade. Please copy | | /var/folders/5d/21v9l2z12j/T/git-repo-0.2.0-619707833 | | to | | /usr/bin/git-repo | | by hands | +--------------------------------------------------------------------------------+ Error: upgrade failed  For this case, run the instruction given by the example, e.</description>
      </item>
      
      <item>
        <title>Overview</title>
        <link>http://git-repo.info/en/docs/single-repo/overview/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://git-repo.info/en/docs/single-repo/overview/</guid>
        <description>git-repo provides several alias commands for git workflow on a single repository:
 git peer-review or git pr: publish local commits to create code review. git download: download specific code review from remote to the local repository. git abandon: prune already published local branch.  Demo for git workflow on a single repository:
  Fig: git-repo for multiple repositories
  </description>
      </item>
      
      <item>
        <title>git peer-review</title>
        <link>http://git-repo.info/en/docs/single-repo/git-peer-review/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://git-repo.info/en/docs/single-repo/git-peer-review/</guid>
        <description>git-repo provides alias command git peer-review or git pr to create a code review on a single repository.
1. Create a code review 1.1 Clone Clone remote repository to the local workspace (Ignore this step, if have local repository already):
$ git clone https://codeup.aliyun.com/git-repo/demo.git $ cd demo  1.2 Create a local topic branch This step is optional. If you want to work on several different tasks at the same local workspace, you must create a topic branch for each task.</description>
      </item>
      
      <item>
        <title>git download</title>
        <link>http://git-repo.info/en/docs/single-repo/git-download/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://git-repo.info/en/docs/single-repo/git-download/</guid>
        <description>Description Download commits of the specific code review, and check out the tip commit by default.
git download is an alias command of git-repo.
Usage git download [options] &amp;lt;Merge-Request-ID&amp;gt; git download [options] &amp;lt;Change-ID&amp;gt;/&amp;lt;Patch-ID&amp;gt;  Note:
 For AGit-Flow and other compatible services, use &amp;lt;Merge-Request-ID&amp;gt; as a argument. For Gerrit service, use &amp;lt;Change-ID&amp;gt;/&amp;lt;Patch-ID&amp;gt; format argument.  Options Available options:
 -c, --cherry-pick: Run cherry-pick after fetching. -f, --ff-only: Run merge --ff-only after fetching.</description>
      </item>
      
      <item>
        <title>git abandon</title>
        <link>http://git-repo.info/en/docs/single-repo/git-abandon/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://git-repo.info/en/docs/single-repo/git-abandon/</guid>
        <description>Description Remove already published local branches. If option --force is given, will delete branch by force, just like git branch -D &amp;lt;branch-name&amp;gt;.
git abandon is an alias command of git-repo.
Usage git abandon [options]  Options Available options:
 --all: Abandon all branches. -b, --branch: Abandon specific branch. --force: Delete by force, even local branch is not published yet.  </description>
      </item>
      
      <item>
        <title>Overview</title>
        <link>http://git-repo.info/en/docs/multi-repos/overview/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://git-repo.info/en/docs/multi-repos/overview/</guid>
        <description>Git built-in solution for multiple repositories is git submodule. It is OK for the release of the source code of all related repositories, but it is bad for development because all sub repositories pin to specific commits.
Android project introduced a better solution for the management of multiple repositories that the relationship of repositories is defined in an XML file in a manifest project. Android also introduced a new command-line tool named repo, which helps manage repositories.</description>
      </item>
      
      <item>
        <title>Manifest Format</title>
        <link>http://git-repo.info/en/docs/multi-repos/manifest-format/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://git-repo.info/en/docs/multi-repos/manifest-format/</guid>
        <description>Manifest file example In a manifest repository, there are one or more XML files, which define the relationship of all repositories of the project. The default manifest file in the manifest project is default.xml. See the following content of a manifest file as an example:
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;manifest&amp;gt; &amp;lt;remote name=&amp;quot;origin&amp;quot; fetch=&amp;quot;..&amp;quot; revision=&amp;quot;master&amp;quot; review=&amp;quot;https://codeup.aliyun.com&amp;quot; /&amp;gt; &amp;lt;remote name=&amp;quot;github&amp;quot; fetch=&amp;quot;https://github.com&amp;quot; revision=&amp;quot;master&amp;quot; review=&amp;quot;&amp;quot; /&amp;gt; &amp;lt;default remote=&amp;quot;origin&amp;quot; revision=&amp;quot;master&amp;quot; sync-j=&amp;quot;4&amp;quot; /&amp;gt; &amp;lt;project name=&amp;quot;alibaba/git-repo-go&amp;quot; path=&amp;quot;git-repo&amp;quot; groups=&amp;quot;app&amp;quot;&amp;gt; &amp;lt;linkfile src=&amp;quot;README.</description>
      </item>
      
      <item>
        <title>git repo init</title>
        <link>http://git-repo.info/en/docs/multi-repos/git-repo-init/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://git-repo.info/en/docs/multi-repos/git-repo-init/</guid>
        <description>Description Initialize the current workspace or re-initialize workspace with different options.
Will create .repo directory inside workspace while executing git repo init. There are one manifest repository and manifest file .repo/manifest.xml inside.
Some options of git repo init will save as git configs in the .repo/manifests.git repository, such as -m &amp;lt;name&amp;gt;, -g &amp;lt;groups&amp;gt; options.
Usage git repo init -u &amp;lt;URL&amp;gt; [options...]  Options Available options:
 -u &amp;lt;URL&amp;gt;: URL of manifest project.</description>
      </item>
      
      <item>
        <title>git repo sync</title>
        <link>http://git-repo.info/en/docs/multi-repos/git-repo-sync/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://git-repo.info/en/docs/multi-repos/git-repo-sync/</guid>
        <description>Description Run git fetch and git checkout to downloads new changes and updates the working files in your local workspace. If you run repo sync without arguments, it synchronizes the files for all projects.
When you run repo sync, this is what happens:
  Update manifest project.
  Compare with the project list file (if exist) generated by last git repo sync command, and remove obsolete projects (if nothing changed).</description>
      </item>
      
      <item>
        <title>git repo start</title>
        <link>http://git-repo.info/en/docs/multi-repos/git-repo-start/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://git-repo.info/en/docs/multi-repos/git-repo-start/</guid>
        <description>Description Begin a new branch for development, starting from the revision specified in the manifest.
Usage Create a new branch for specific projects.
git repo start &amp;lt;branch-name&amp;gt; [project...]  Create a new branch for all projects.
git repo start --all &amp;lt;branch-name&amp;gt;  </description>
      </item>
      
      <item>
        <title>git repo upload</title>
        <link>http://git-repo.info/en/docs/multi-repos/git-repo-upload/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://git-repo.info/en/docs/multi-repos/git-repo-upload/</guid>
        <description>Description Send changes to remote server to create code reviews.
For the specified projects, compares the local branches to the remote branches updated during the last git repo sync. git-repo prompts you to select one or more of the branches that haven&amp;rsquo;t been uploaded for review.
git repo upload command will start an editor for you with the following text as an example. Add custom options and choose the branches that need to be uploaded in the editor.</description>
      </item>
      
      <item>
        <title>git repo download</title>
        <link>http://git-repo.info/en/docs/multi-repos/git-repo-download/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://git-repo.info/en/docs/multi-repos/git-repo-download/</guid>
        <description>Description Download commits of the specific code review, and check out the tip commit by default.
Usage git repo download [options] &amp;lt;project&amp;gt; &amp;lt;Merge-Request-ID&amp;gt; ... git repo download [options] &amp;lt;project&amp;gt; &amp;lt;Change-ID&amp;gt;/&amp;lt;Patch-ID&amp;gt; ...  Note:
 For AGit-Flow and other compatible services, use &amp;lt;Merge-Request-ID&amp;gt; as a argument. For Gerrit service, use &amp;lt;Change-ID&amp;gt;/&amp;lt;Patch-ID&amp;gt; format argument.  Options Available options:
 -c, --cherry-pick: Run cherry-pick after fetching. -f, --ff-only: Run merge --ff-only after fetching. -r, --revert: Revert specific change of Gerrit.</description>
      </item>
      
      <item>
        <title>git repo forall</title>
        <link>http://git-repo.info/en/docs/multi-repos/git-repo-forall/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://git-repo.info/en/docs/multi-repos/git-repo-forall/</guid>
        <description>Description This command provides an iterator, run a specific shell command on each project.
The following environments can be used in a shell command:
 REPO_PROJECT: Name of project. REPO_PATH: Relative path to the project. REPO_REMOTE: Name of the remote in the manifest.  Usage git repo forall [project-list] -c command  Options Available options:
 -c: Command and arguments for each project to run. -e: If fail once, quit immediately.</description>
      </item>
      
      <item>
        <title>git repo status</title>
        <link>http://git-repo.info/en/docs/multi-repos/git-repo-status/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://git-repo.info/en/docs/multi-repos/git-repo-status/</guid>
        <description>Description Show a summary of git status on each project. For each file in the project, a two-letter code is used. The first letter stands for changes of index, and the second letter stands for changes of worktree.
In the first column, an uppercase letter indicates how the index differs from the last committed state.
   Letter Meaning Description     - No change Same in HEAD and index   A Added Not in HEAD, in index   M Modified In HEAD, modified in index   D Deleted In HEAD, not in index   R Renamed Not in HEAD, path changed in index   C Copied Not in HEAD, copied from another in index   T Mode changed Same content in HEAD and index, mode changed   U Unmerged Conflict between HEAD and index; resolution required    In the second column, a lowercase letter indicates how the working directory differs from the index.</description>
      </item>
      
      <item>
        <title>git repo abandon</title>
        <link>http://git-repo.info/en/docs/multi-repos/git-repo-abandon/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://git-repo.info/en/docs/multi-repos/git-repo-abandon/</guid>
        <description>Description Remove already published local branches. If option --force is given, will delete branch by force, just like git branch -D &amp;lt;branch-name&amp;gt;.
Usage git-repo abandon [options] [&amp;lt;project&amp;gt;...]  Options Available options:
 --all: Abandon all branches. -b, --branch: Abandon the specific branch. --force: Delete by force, even local branch is not published yet.  </description>
      </item>
      
      <item>
        <title>git repo prune</title>
        <link>http://git-repo.info/en/docs/multi-repos/git-repo-prune/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://git-repo.info/en/docs/multi-repos/git-repo-prune/</guid>
        <description>Description Delete all published local branches.
It equivalent to git repo abandon --all [&amp;lt;project&amp;gt;...] command. git repo prune does not allow --force option, so it is safer.
Usage git-repo prune [&amp;lt;project&amp;gt;...]  </description>
      </item>
      
      <item>
        <title>Agit-Flow and git-repo</title>
        <link>http://git-repo.info/en/2020/03/agit-flow-and-git-repo/</link>
        <pubDate>Wed, 04 Mar 2020 08:00:00 +0800</pubDate>
        
        <guid>http://git-repo.info/en/2020/03/agit-flow-and-git-repo/</guid>
        <description>About myself Due to the coronavirus outbreak in China, I was unable to attend the Git Merge 2020 conference to give a speech on &amp;ldquo;AGit and git-repo&amp;rdquo; in Los Angeles on March 4, 2020. It&amp;rsquo;s a pity that I can&amp;rsquo;t communicate face to face with developers all over the world this time. I will share the content of my speech on this blog.
A brief introduction to myself:
  I am Jiang Xin, a software engineer in Alibaba, China.</description>
      </item>
      
      <item>
        <title></title>
        <link>http://git-repo.info/en/changelog/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://git-repo.info/en/changelog/</guid>
        <description>Changelog Changes of git-repo.
0.7.5 (2020-09-08) Improvements:
 Support using http proxy when access ssh_info API prune: drop branches without a tracking branch start: not setup tracking branch for immutable rev  Bugfix:
 bugfix: close project.list file before rename Transfer repository from aliyun to alibaba  0.7.4 (2020-03-03) Bugfix:
 To prevent wrong flag for OpenFile, use new file package fix: config example file is not completely overwritten Set proper Revision for manifest project sync: remove unused and unsafe code init: detach manifests project for immutable revision init: when switch manifest branch, use hard reset ssh-info: run ssh_info once for the same hosts  0.</description>
      </item>
      
    
  </channel>
</rss>